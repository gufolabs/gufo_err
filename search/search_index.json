{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#python-error-handling","title":"Python Error Handling","text":"<p>Errors are in human nature - so any modern software may face errors.  Software may contain errors itself, may be affected  by third-party libraries' mistakes, or may weirdly use  third-party libraries. Computers, operation systems, and networks also may fail.  So proper error handling is the key component to building reliable and robust software.</p> <p>Proper error handling consists of the stages:</p> <ul> <li>Collecting - we must catch the error for further processing.</li> <li>Reporting - we must log the error.</li> <li>Mitigation - we must restart software if an error is unrecoverable  (fail-fast behavior) or try to fix it on-fly.</li> <li>Reporting - we must report the error to the developers to allow them to fix it.</li> <li>Fixing - developers should fix the error.</li> </ul> <p>Gufo Err is the final solution for Python exception handling and introduces the middleware-based approach. Middleware uses clean API for stack frame analysis and source code extraction.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Clean API to extract execution frames.</li> <li>Global Python exception hook.</li> <li>Endless recursion detection  (to be done).</li> <li>Local error reporting.</li> <li>Configurable fail-fast behavior.</li> <li>Configurable error-reporting formats.</li> <li>Error fingerprinting.</li> <li>Traceback serialization/deserialization.</li> <li>CLI tool for tracebacks analysis.</li> <li>Seamless Sentry integration.</li> <li>Built with security in mind.</li> </ul>"},{"location":"#on-gufo-stack","title":"On Gufo Stack","text":"<p>This product is a part of Gufo Stack - the collaborative effort  led by Gufo Labs. Our goal is to create a robust and flexible  set of tools to create network management software and automate  routine administration tasks.</p> <p>To do this, we extract the key technologies that have proven themselves  in the NOC and bring them as separate packages. Then we work on API, performance tuning, documentation, and testing. The NOC uses the final result as the external dependencies.</p> <p>Gufo Stack makes the NOC better, and this is our primary task. But other products can benefit from Gufo Stack too. So we believe that our effort will make  the other network management products better.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p> <p>To see unreleased changes, please see the CHANGELOG on the master branch guide.</p>"},{"location":"CHANGELOG/#060-2025-10-10","title":"0.6.0 - 2025-10-10","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Explicitly enumerate all exportable symbols into <code>__all__</code>.</li> <li>Python 3.14 support.</li> </ul>"},{"location":"CHANGELOG/#security","title":"Security","text":"<ul> <li>Install security updates during devcontainer build.</li> </ul>"},{"location":"CHANGELOG/#infrastructure","title":"Infrastructure","text":"<ul> <li>Ruff 0.14.0</li> <li>Mypy 1.18.2</li> <li>Pytest 8.4.2</li> <li>IPython 9.6.0</li> <li>Codecov integration.</li> <li>Use python:3.14-slim-trixie as base for devcontainer.</li> </ul>"},{"location":"CHANGELOG/#050-2025-08-27","title":"0.5.0 - 2025-08-27","text":""},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>Restore previous exception handler on deleting err object</li> </ul>"},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>Python 3.13 support</li> </ul>"},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Minimal sentry_sdk version is 2.8.0</li> </ul>"},{"location":"CHANGELOG/#removed","title":"Removed","text":"<ul> <li>Python 3.8 support</li> </ul>"},{"location":"CHANGELOG/#infrastructure_1","title":"Infrastructure","text":"<ul> <li>Move requirements to pyproject.toml</li> <li>Move to ruff formatter from black</li> <li>mkdocs-material 9.5.44</li> <li>mypy 1.13.0</li> <li>ruff 0.11.2</li> <li>pytest 8.3.3</li> </ul>"},{"location":"CHANGELOG/#041-2023-12-11","title":"0.4.1 - 2023-12-11","text":""},{"location":"CHANGELOG/#added_2","title":"Added","text":"<ul> <li>Python 3.12 tests.</li> </ul>"},{"location":"CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>docs: Fancy home page.</li> <li>devcontainer: Use Python 3.12.</li> </ul>"},{"location":"CHANGELOG/#040-2023-09-01","title":"0.4.0 - 2023-09-01","text":""},{"location":"CHANGELOG/#added_3","title":"Added","text":"<ul> <li><code>err</code> command-line tool.</li> <li><code>BaseFormatter</code> abstract base class.</li> <li><code>TerseFormatter</code> and <code>ExtendFormatter</code> formatters.</li> <li><code>ErrorInfo</code> got optional <code>root_module</code> field.</li> <li><code>ErrorInfo.get_top_app_frame()</code> function.</li> <li><code>py.typed</code> file for PEP-561 compatibility</li> <li>docs: \"Supported standards\" page</li> </ul>"},{"location":"CHANGELOG/#changed_2","title":"Changed","text":"<ul> <li>docs: Code Quality</li> <li>Refined docstrigs</li> </ul>"},{"location":"CHANGELOG/#infrastructure_2","title":"Infrastructure","text":"<ul> <li>Use <code>actions/checkout@v3</code></li> <li>Use <code>actions/cache@v3</code></li> <li>Use <code>pypa/gh-action-pypi-publish@release/v1</code></li> <li>Project structure tests</li> <li>CI workflows tests</li> <li>Adopt Ruff</li> <li>Coverage 7.3.0</li> <li>mypy 1.5.1</li> <li>Move <code>.coveragerc</code> to <code>pyproject.toml</code></li> <li>Move <code>setup.cfg</code> to <code>pyproject.toml</code></li> </ul>"},{"location":"CHANGELOG/#030-2022-11-09","title":"0.3.0 - 2022-11-09","text":""},{"location":"CHANGELOG/#added_4","title":"Added","text":"<ul> <li>Python 3.11 support.</li> <li>TracebackMiddleware shows exact problem position on Python 3.11+</li> <li><code>CodePosition</code> structure for exact code location (Python 3.11+)</li> <li><code>SourceInfo</code> got optional <code>pos</code> field.</li> <li>Add CITATIONS.cff</li> <li>Developer's Common Tasks</li> </ul>"},{"location":"CHANGELOG/#changed_3","title":"Changed","text":"<ul> <li>Move changelog into the project's root</li> </ul>"},{"location":"CHANGELOG/#infrastructure_3","title":"Infrastructure","text":"<ul> <li>Use Python 3.11 for devcontainer</li> <li>mkdocs-material 8.5.8</li> <li>pytest 7.2.0</li> <li>Coverage 6.5.0</li> </ul>"},{"location":"CHANGELOG/#020-2022-04-18","title":"0.2.0 - 2022-04-18","text":""},{"location":"CHANGELOG/#added_5","title":"Added","text":"<ul> <li><code>ErrorInfo</code> JSON serialization/deserialization.</li> <li>ErrorInfoMiddleware to write collected errors to JSON files.</li> <li> <p>New Err.setup options:</p> <ul> <li><code>error_info_path</code></li> <li><code>error_info_compress</code></li> </ul> </li> </ul>"},{"location":"CHANGELOG/#011-2022-04-15","title":"0.1.1 - 2022-04-15","text":""},{"location":"CHANGELOG/#added_6","title":"Added","text":"<ul> <li><code>__version__</code> attribute.</li> </ul>"},{"location":"CHANGELOG/#010-2022-03-22","title":"0.1.0 - 2022-03-22","text":""},{"location":"CHANGELOG/#_1","title":"Changelog","text":"<ul> <li>Initial release.</li> </ul>"},{"location":"LICENSE/","title":"License","text":"<p>Copyright \u00a9 2022-2025, Gufo Labs. All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ol> <li>Redistributions of source code must retain the above copyright notice,    this list of conditions and the following disclaimer.</li> <li>Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the    documentation and/or other materials provided with the distribution.</li> <li>Neither the name of Gufo Labs nor the names of its contributors may be used    to endorse or promote products derived from this software without    specific prior written permission.</li> </ol> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>"},{"location":"faq/","title":"FAQ","text":"<p>What is \"Gufo\"?</p> <p>Gufo means the Owl in Italian.</p> <p>Why the owls?</p> <p>We love owls and the viable parts of our technologies were proven at the project, named \"the Owl\".</p> <p>What is \"Gufo Labs\"?</p> <p>Gufo Labs is the Milan-based company specialized on network and IT consulting, and on software research.</p> <p>What is \"Gufo Stack\"?</p> <p>We've extracted core components behind the NOC  and released them as independent packages, available under the terms  of the 3-clause BSD license. Our software shares common code quality standards  and is battle-proven under the high load. We hope our key components will help  the engineers and the developers to build reliable networks and robust network  management software.  See more for details.</p>"},{"location":"installation/","title":"Installation","text":"<p>Install with the pip</p> <pre><code>$ pip install gufo_err\n</code></pre> <p>To enable Sentry support:</p> <pre><code>$ pip install gufo_err[sentry]\n</code></pre>"},{"location":"installation/#checking-the-installation","title":"Checking the Installation","text":"<p>To check the installation just import the module</p> <pre><code>from gufo.err import iter_frames\n</code></pre>"},{"location":"installation/#upgrading","title":"Upgrading","text":"<p>To upgrade existing Gufo Err installation use pip</p> <pre><code>$ pip install --upgrade gufo_err\n</code></pre>"},{"location":"installation/#uninstalling","title":"Uninstalling","text":"<p>To uninstall Gufo Err use pip</p> <pre><code>$ pip uninstall gufo_err\n</code></pre>"},{"location":"dev/","title":"Gufo Err: Developer's Guide","text":"<p>This section is intended for Gufo Err developers and for entities,  including both individuals and companies, interested in contributing to the project.</p> <ul> <li>Developer's Environment</li> <li>Building and Testing</li> <li>Common Tasks</li> <li>Code Quality</li> <li>Code Base</li> <li>Contributing Guide</li> <li>Code of Conduct</li> <li>Supported Standards</li> </ul>"},{"location":"dev/CODE_OF_CONDUCT/","title":"Gufo Stack Code of Conduct","text":"<p>Gufo Stack are the tools built by people for people. We aim to create a respectful, collaborative, and constructive community where everyone can contribute to building better software.</p>"},{"location":"dev/CODE_OF_CONDUCT/#the-rule","title":"The Rule","text":"<p>\u201cAnd as you wish that others would do to you, do so to them.\u201d</p> <p>-- Luke 6:31</p>"},{"location":"dev/CODE_OF_CONDUCT/#the-note","title":"The Note","text":"<p>This principle is universal. Similar wisdom can be found in many traditions:</p> <ul> <li>Confucius: \u201cDo not impose on others what you do not wish for yourself.\u201d (Analects 15:24)</li> <li>Prophet Muhammad (peace be upon him): \u201cNone of you [truly] believes until he loves for his brother what he loves for himself.\u201d (Hadith, Sahih Muslim 45:71)</li> </ul> <p>That\u2019s all.</p>"},{"location":"dev/CONTRIBUTING/","title":"Types of contributions","text":"<p>You can contribute to the Gufo Labs projects in several way. This repo is a place to discuss and collaborate on GitHub! Our team is maintaining this repo to preserve our bandwidth, off topic conversations will be closed.</p>"},{"location":"dev/CONTRIBUTING/#discussions","title":"Discussions","text":"<p>Discussions are where we have conversations.</p> <p>If you'd like help troubleshooting a PR you're working on, have a great new idea, or want to share something amazing you've learned in our docs, join us in discussions.</p>"},{"location":"dev/CONTRIBUTING/#issues","title":"Issues","text":"<p>Issues are used to track tasks that contributors can help with. </p> <p>If you've found bug, or something in the content of the documentation that should be updated, search open issues to see if someone else has reported the same thing. If it's something new, open an issue. We'll use the issue to have a conversation about the problem you want to fix.</p>"},{"location":"dev/CONTRIBUTING/#pull-requests","title":"Pull requests","text":"<p>A pull request is a way to suggest changes in our repository.</p>"},{"location":"dev/codebase/","title":"Project's Code Base","text":"<p>The code base of the project has following structure:</p> <ul> <li><code>.devcontainer/</code> - Developer's container configuration for    VSCode Remote Containers. Just reopen   project in remote container to get ready-to-development   environment.</li> <li> <p><code>.github/</code> - GitHub settings</p> <ul> <li><code>workflows/</code> - GitHub Actions Workflows settings.   Used to run tests and build the documentation.</li> </ul> </li> <li> <p><code>docs/</code> - Mkdocs documentation.</p> </li> <li><code>examples/</code> - Project's examples.</li> <li><code>src/</code> - Project's source code.</li> <li><code>tests/</code> - Project's Pytest test suite.</li> <li><code>.gitignore</code> - Gitignore file.</li> <li><code>Dockerfile</code> - Dockerfile for development container.</li> <li><code>mkdocs.yml</code> - Mkdocs configuration file.</li> <li><code>pyproject.toml</code> - pyproject.toml file for python tools configuration.</li> </ul>"},{"location":"dev/codequality/","title":"Code Quality Guide","text":"<p>We share the common code quality standards between all Gufo Labs projects.</p>"},{"location":"dev/codequality/#python-code-formatting","title":"Python Code Formatting","text":"<p>All Python code must be formatting using ruff code formatter with settings defined in the project's <code>pyproject.toml</code> file.</p>"},{"location":"dev/codequality/#python-code-linting","title":"Python Code Linting","text":"<p>All Python code must pass ruff tests with the project's settings.</p>"},{"location":"dev/codequality/#python-code-static-checks","title":"Python Code Static Checks","text":"<p>All python code must pass Mypy type checks in the <code>strict</code> mode.</p>"},{"location":"dev/codequality/#test-suite-coverage","title":"Test Suite Coverage","text":"<p>The test suite must provide 100% code coverage whenever possible.</p>"},{"location":"dev/codequality/#documentation-standards","title":"Documentation Standards","text":"<ul> <li>Documentation must be clean and mean.</li> </ul>"},{"location":"dev/common/","title":"Developer's Common  Tasks","text":""},{"location":"dev/common/#bump-version","title":"Bump Version","text":"<ul> <li> Change <code>__version__</code> in <code>src/gufo/err/__init__.py</code></li> <li> Add section in <code>CHANGELOG.md</code></li> </ul>"},{"location":"dev/environment/","title":"Developer's Environment","text":"<p>To participate in development you need to prepare the developer's environment first. Depending on the preferable tools, your mileage may vary.</p>"},{"location":"dev/environment/#visual-studio-code-dev-container","title":"Visual Studio Code Dev Container","text":"<p>The easiest way to start the development is to use Visual Studio Code with Remote Containers plugin. Just click on the green sign in the lower-left corner and select the \"Reopen in Container\" menu item. You'll get all the required formatting and linting settings out of the box.</p>"},{"location":"dev/standards/","title":"Supported Standards","text":"<p>Gufo Err implements and is guided by the following standards:</p>"},{"location":"dev/standards/#python-pep","title":"Python PEP","text":"<ul> <li>PEP8: Style Guide for Python Code</li> <li>PEP561: Distributing and Packaging Type Information</li> </ul>"},{"location":"dev/testing/","title":"Building and Testing","text":"<p>Before starting building and testing package set up  Developer's Environment first. From here and below we consider the shell's current directory matches the project's root directory.</p>"},{"location":"dev/testing/#building-package","title":"Building Package","text":"<p>To test the package build run:</p> <pre><code>$ python -m build --sdist --wheel\n</code></pre> <p>Compiled packages will be available in the <code>dist/</code> directory.</p>"},{"location":"dev/testing/#running-tests","title":"Running tests","text":"<p>To run the test suit:</p> <pre><code>$ pytest -vv\n</code></pre>"},{"location":"dev/testing/#running-lints","title":"Running Lints","text":"<p>All lints are checked as part of GitHub Actions Workflow. You may run lints manually before committing to the project.</p>"},{"location":"dev/testing/#check-formatting","title":"Check Formatting","text":"<p>Python Code Formatting is the mandatory requirement in our Code Quality standards. To check code formatting run:</p> <pre><code>$ ruff format --check examples/ src/ tests/\n</code></pre> <p>To fix formatting errors run: <pre><code>$ ruff format examples/ src/ tests/\n</code></pre></p> <p>We recommend setting python code formatting on file saving (Done in VS Code Dev Container out of the box).</p>"},{"location":"dev/testing/#python-code-lints","title":"Python Code Lints","text":"<p>Python Code Linting is the mandatory requirement in our Code Quality standards. To check code for linting errors run:</p> <pre><code>$ flake8 examples/ src/ tests/\n</code></pre>"},{"location":"dev/testing/#python-code-static-checks","title":"Python Code Static Checks","text":"<p>Python Code Static Checks is the mandatory requirement in our Code Quality standards. To check code for typing errors run:</p> <pre><code>$ mypy --strict src/\n</code></pre>"},{"location":"dev/testing/#python-test-code-coverage-check","title":"Python Test Code Coverage Check","text":"<p>To evaluate code coverage run tests:</p> <pre><code>$ coverage run -m pytest -vv\n</code></pre> <p>To report the coverage after the test run:</p> <pre><code>$ coverage report\n</code></pre> <p>To show line-by-line coverage:</p> <pre><code>$ coverage html\n</code></pre> <p>Then open <code>dist/coverage/index.html</code> file in your browser.</p>"},{"location":"dev/testing/#building-documentation","title":"Building Documentation","text":"<p>To rebuild and check documentation run</p> <pre><code>$ mkdocs serve\n</code></pre> <p>We recommend using Grammarly service to check documentation for common errors.</p>"},{"location":"examples/","title":"Gufo Err Examples","text":"<ul> <li>global: Global exception handler.</li> <li>globalextend: Global exception handler with     extended output.</li> <li>process: Explicit error domain processing.</li> <li>failfast: Fail-fast handler.</li> </ul>"},{"location":"examples/failfast/","title":"Gufo Err Example: Fail-fast","text":"<p>Errors may be unrecoverable. Application should be stopped as soon as possible to minimise the possible damage. Lets implement the simple fail-fast behavior. Consider the <code>RuntimeError</code> is fatal.</p> failfast.py<pre><code>from types import TracebackType\nfrom typing import Type\n\nfrom gufo.err import BaseFailFast, err\n\n\nclass FailOnType(BaseFailFast):\n    def __init__(self, exc_type) -&gt; None:\n        super().__init__()\n        self.exc_type = exc_type\n\n    def must_die(\n        self, t: Type[BaseException], v: BaseException, tb: TracebackType\n    ) -&gt; bool:\n        return t == self.exc_type\n\n\nerr.setup(fail_fast=[FailOnType(RuntimeError)], fail_fast_code=5)\n\n\ndef fail():\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\ntry:\n    fail()\nexcept Exception:\n    err.process()\nprint(\"Stopping\")\n</code></pre> <p>Lets see.</p> failfast.py<pre><code>from types import TracebackType\nfrom typing import Type\n\nfrom gufo.err import BaseFailFast, err\n\n\nclass FailOnType(BaseFailFast):\n    def __init__(self, exc_type) -&gt; None:\n        super().__init__()\n        self.exc_type = exc_type\n\n    def must_die(\n        self, t: Type[BaseException], v: BaseException, tb: TracebackType\n    ) -&gt; bool:\n        return t == self.exc_type\n\n\nerr.setup(fail_fast=[FailOnType(RuntimeError)], fail_fast_code=5)\n\n\ndef fail():\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\ntry:\n    fail()\nexcept Exception:\n    err.process()\nprint(\"Stopping\")\n</code></pre> <p>Type hints is the great help, so lets import the necessary types.</p> failfast.py<pre><code>from types import TracebackType\nfrom typing import Type\n\nfrom gufo.err import BaseFailFast, err\n\n\nclass FailOnType(BaseFailFast):\n    def __init__(self, exc_type) -&gt; None:\n        super().__init__()\n        self.exc_type = exc_type\n\n    def must_die(\n        self, t: Type[BaseException], v: BaseException, tb: TracebackType\n    ) -&gt; bool:\n        return t == self.exc_type\n\n\nerr.setup(fail_fast=[FailOnType(RuntimeError)], fail_fast_code=5)\n\n\ndef fail():\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\ntry:\n    fail()\nexcept Exception:\n    err.process()\nprint(\"Stopping\")\n</code></pre> <p>All error configuration is performed via <code>err</code> singleton, so we need to import it first. We also need the <code>BaseFailFast</code> class to implement our handler.</p> failfast.py<pre><code>from types import TracebackType\nfrom typing import Type\n\nfrom gufo.err import BaseFailFast, err\n\n\nclass FailOnType(BaseFailFast):\n    def __init__(self, exc_type) -&gt; None:\n        super().__init__()\n        self.exc_type = exc_type\n\n    def must_die(\n        self, t: Type[BaseException], v: BaseException, tb: TracebackType\n    ) -&gt; bool:\n        return t == self.exc_type\n\n\nerr.setup(fail_fast=[FailOnType(RuntimeError)], fail_fast_code=5)\n\n\ndef fail():\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\ntry:\n    fail()\nexcept Exception:\n    err.process()\nprint(\"Stopping\")\n</code></pre> <p>Lets define our fail-fast handler. It must be derived from <code>BaseFailFast</code>.</p> <p>failfast.py<pre><code>from types import TracebackType\nfrom typing import Type\n\nfrom gufo.err import BaseFailFast, err\n\n\nclass FailOnType(BaseFailFast):\n    def __init__(self, exc_type) -&gt; None:\n        super().__init__()\n        self.exc_type = exc_type\n\n    def must_die(\n        self, t: Type[BaseException], v: BaseException, tb: TracebackType\n    ) -&gt; bool:\n        return t == self.exc_type\n\n\nerr.setup(fail_fast=[FailOnType(RuntimeError)], fail_fast_code=5)\n\n\ndef fail():\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\ntry:\n    fail()\nexcept Exception:\n    err.process()\nprint(\"Stopping\")\n</code></pre> Our handler accepts exception type to check as its own configuration parameter.</p> failfast.py<pre><code>from types import TracebackType\nfrom typing import Type\n\nfrom gufo.err import BaseFailFast, err\n\n\nclass FailOnType(BaseFailFast):\n    def __init__(self, exc_type) -&gt; None:\n        super().__init__()\n        self.exc_type = exc_type\n\n    def must_die(\n        self, t: Type[BaseException], v: BaseException, tb: TracebackType\n    ) -&gt; bool:\n        return t == self.exc_type\n\n\nerr.setup(fail_fast=[FailOnType(RuntimeError)], fail_fast_code=5)\n\n\ndef fail():\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\ntry:\n    fail()\nexcept Exception:\n    err.process()\nprint(\"Stopping\")\n</code></pre> <p>Do not forget always call base class constructor unless you know what you do. Otherwise, you code may be broken with future update.</p> failfast.py<pre><code>from types import TracebackType\nfrom typing import Type\n\nfrom gufo.err import BaseFailFast, err\n\n\nclass FailOnType(BaseFailFast):\n    def __init__(self, exc_type) -&gt; None:\n        super().__init__()\n        self.exc_type = exc_type\n\n    def must_die(\n        self, t: Type[BaseException], v: BaseException, tb: TracebackType\n    ) -&gt; bool:\n        return t == self.exc_type\n\n\nerr.setup(fail_fast=[FailOnType(RuntimeError)], fail_fast_code=5)\n\n\ndef fail():\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\ntry:\n    fail()\nexcept Exception:\n    err.process()\nprint(\"Stopping\")\n</code></pre> <p>Lets store our configuration as <code>exc_type</code> argument.</p> failfast.py<pre><code>from types import TracebackType\nfrom typing import Type\n\nfrom gufo.err import BaseFailFast, err\n\n\nclass FailOnType(BaseFailFast):\n    def __init__(self, exc_type) -&gt; None:\n        super().__init__()\n        self.exc_type = exc_type\n\n    def must_die(\n        self, t: Type[BaseException], v: BaseException, tb: TracebackType\n    ) -&gt; bool:\n        return t == self.exc_type\n\n\nerr.setup(fail_fast=[FailOnType(RuntimeError)], fail_fast_code=5)\n\n\ndef fail():\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\ntry:\n    fail()\nexcept Exception:\n    err.process()\nprint(\"Stopping\")\n</code></pre> <p><code>must_die</code> function is the key function for fail-fast handler. It accepts the result of <code>sys.exc_info()</code> function. First parameter is the exception type. Second is the exception value. Last is the frame information. Fail-fast handlers return boolean value. <code>True</code> should be returned if the error is unrecoverable, <code>False</code> - otherwise.</p> failfast.py<pre><code>from types import TracebackType\nfrom typing import Type\n\nfrom gufo.err import BaseFailFast, err\n\n\nclass FailOnType(BaseFailFast):\n    def __init__(self, exc_type) -&gt; None:\n        super().__init__()\n        self.exc_type = exc_type\n\n    def must_die(\n        self, t: Type[BaseException], v: BaseException, tb: TracebackType\n    ) -&gt; bool:\n        return t == self.exc_type\n\n\nerr.setup(fail_fast=[FailOnType(RuntimeError)], fail_fast_code=5)\n\n\ndef fail():\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\ntry:\n    fail()\nexcept Exception:\n    err.process()\nprint(\"Stopping\")\n</code></pre> <p>The logic is simple. If the exception type is matched with configured one - we must fail.</p> failfast.py<pre><code>from types import TracebackType\nfrom typing import Type\n\nfrom gufo.err import BaseFailFast, err\n\n\nclass FailOnType(BaseFailFast):\n    def __init__(self, exc_type) -&gt; None:\n        super().__init__()\n        self.exc_type = exc_type\n\n    def must_die(\n        self, t: Type[BaseException], v: BaseException, tb: TracebackType\n    ) -&gt; bool:\n        return t == self.exc_type\n\n\nerr.setup(fail_fast=[FailOnType(RuntimeError)], fail_fast_code=5)\n\n\ndef fail():\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\ntry:\n    fail()\nexcept Exception:\n    err.process()\nprint(\"Stopping\")\n</code></pre> <p><code>err.setup()</code> function must be called to initialize and confugure the error protection. None, we pass to the <code>fail_fast</code> argument a list of configured fail-fast handler instances, not a classes. <code>fail_fast_code</code> parameter is optional and sets the exit code on fail-fast termination. Default code is <code>1</code>, but we set it to <code>5</code> for our example. See Err.setup() for details.</p> failfast.py<pre><code>from types import TracebackType\nfrom typing import Type\n\nfrom gufo.err import BaseFailFast, err\n\n\nclass FailOnType(BaseFailFast):\n    def __init__(self, exc_type) -&gt; None:\n        super().__init__()\n        self.exc_type = exc_type\n\n    def must_die(\n        self, t: Type[BaseException], v: BaseException, tb: TracebackType\n    ) -&gt; bool:\n        return t == self.exc_type\n\n\nerr.setup(fail_fast=[FailOnType(RuntimeError)], fail_fast_code=5)\n\n\ndef fail():\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\ntry:\n    fail()\nexcept Exception:\n    err.process()\nprint(\"Stopping\")\n</code></pre> <p>Lets define the function which will intentionally fail.</p> failfast.py<pre><code>from types import TracebackType\nfrom typing import Type\n\nfrom gufo.err import BaseFailFast, err\n\n\nclass FailOnType(BaseFailFast):\n    def __init__(self, exc_type) -&gt; None:\n        super().__init__()\n        self.exc_type = exc_type\n\n    def must_die(\n        self, t: Type[BaseException], v: BaseException, tb: TracebackType\n    ) -&gt; bool:\n        return t == self.exc_type\n\n\nerr.setup(fail_fast=[FailOnType(RuntimeError)], fail_fast_code=5)\n\n\ndef fail():\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\ntry:\n    fail()\nexcept Exception:\n    err.process()\nprint(\"Stopping\")\n</code></pre> <p>Lets wrap our error domain.</p> failfast.py<pre><code>from types import TracebackType\nfrom typing import Type\n\nfrom gufo.err import BaseFailFast, err\n\n\nclass FailOnType(BaseFailFast):\n    def __init__(self, exc_type) -&gt; None:\n        super().__init__()\n        self.exc_type = exc_type\n\n    def must_die(\n        self, t: Type[BaseException], v: BaseException, tb: TracebackType\n    ) -&gt; bool:\n        return t == self.exc_type\n\n\nerr.setup(fail_fast=[FailOnType(RuntimeError)], fail_fast_code=5)\n\n\ndef fail():\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\ntry:\n    fail()\nexcept Exception:\n    err.process()\nprint(\"Stopping\")\n</code></pre> <p>And call our faulty function.</p> failfast.py<pre><code>from types import TracebackType\nfrom typing import Type\n\nfrom gufo.err import BaseFailFast, err\n\n\nclass FailOnType(BaseFailFast):\n    def __init__(self, exc_type) -&gt; None:\n        super().__init__()\n        self.exc_type = exc_type\n\n    def must_die(\n        self, t: Type[BaseException], v: BaseException, tb: TracebackType\n    ) -&gt; bool:\n        return t == self.exc_type\n\n\nerr.setup(fail_fast=[FailOnType(RuntimeError)], fail_fast_code=5)\n\n\ndef fail():\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\ntry:\n    fail()\nexcept Exception:\n    err.process()\nprint(\"Stopping\")\n</code></pre> <p>Run all the error processing machinery.</p> <p>failfast.py<pre><code>from types import TracebackType\nfrom typing import Type\n\nfrom gufo.err import BaseFailFast, err\n\n\nclass FailOnType(BaseFailFast):\n    def __init__(self, exc_type) -&gt; None:\n        super().__init__()\n        self.exc_type = exc_type\n\n    def must_die(\n        self, t: Type[BaseException], v: BaseException, tb: TracebackType\n    ) -&gt; bool:\n        return t == self.exc_type\n\n\nerr.setup(fail_fast=[FailOnType(RuntimeError)], fail_fast_code=5)\n\n\ndef fail():\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\ntry:\n    fail()\nexcept Exception:\n    err.process()\nprint(\"Stopping\")\n</code></pre> Here we print the debug message. If our fail-fast code works correctly, we will not see this message.</p>"},{"location":"examples/failfast/#running","title":"Running","text":"<p>Run example as:</p> <pre><code>$ python3 examples/failfast.py\n</code></pre> <p>And got the empty output. Let check our error code:</p> <pre><code>$ echo $?\n5\n</code></pre> <p>Note, we didn't saw \"Stopping\" message and our process returns error code <code>5</code>. All just we configured.</p>"},{"location":"examples/global/","title":"Gufo Err Example: Global Hook","text":"<p>Lets install the error handling as the global python exception hook.</p> global.py<pre><code>from gufo.err import err\n\nerr.setup(catch_all=True)\n\n\ndef fail():\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\nfail()\n</code></pre> <p>The code is straightforward:</p> global.py<pre><code>from gufo.err import err\n\nerr.setup(catch_all=True)\n\n\ndef fail():\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\nfail()\n</code></pre> <p>All error configuration is performed via <code>err</code> singleton, so we need to import it first.</p> global.py<pre><code>from gufo.err import err\n\nerr.setup(catch_all=True)\n\n\ndef fail():\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\nfail()\n</code></pre> <p><code>err.setup()</code> function must be called to initialize and confugure the error protection. <code>catch_all</code> argument set to true to replace the Python global error handling. See Err.setup() for details.</p> global.py<pre><code>from gufo.err import err\n\nerr.setup(catch_all=True)\n\n\ndef fail():\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\nfail()\n</code></pre> <p>Lets define the function which will intentionally fail.</p> global.py<pre><code>from gufo.err import err\n\nerr.setup(catch_all=True)\n\n\ndef fail():\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\nfail()\n</code></pre> <p>And call it.</p>"},{"location":"examples/global/#running","title":"Running","text":"<p>Run example as:</p> <pre><code>$ python3 examples/global.py\n</code></pre> <p>And got the output:</p> <pre><code>Error: 39dc9706-9550-5959-9c67-e702d036d4f9\nTraceback (most resent call last):\n  File \"/workspaces/gufo_err/examples/global.py\", line 10, in &lt;module&gt;\n    fail()\n  File \"/workspaces/gufo_err/examples/global.py\", line 7, in fail\n    raise RuntimeError(\"failing\")\nRuntimeError: failing\n</code></pre> <p>Just like a default python traceback? Sure. Gufo Err installs <code>terse</code> traceback format by default to mimic Python's default behavior. But note the first string. <code>39dc9706-9550-5959-9c67-e702d036d4f9</code> is the error fingerprint - the unique error discriminator.</p> <p>Lets run our example again and check the output: <pre><code>Error: 39dc9706-9550-5959-9c67-e702d036d4f9\nTraceback (most resent call last):\n  File \"/workspaces/gufo_err/examples/global.py\", line 10, in &lt;module&gt;\n    fail()\n  File \"/workspaces/gufo_err/examples/global.py\", line 7, in fail\n    raise RuntimeError(\"failing\")\nRuntimeError: failing\n</code></pre></p> <p>Error fingerprint is the same. Fingerprint stability is the key to the error analysis. Who want to analyze same error again and again?</p>"},{"location":"examples/globalextend/","title":"Gufo Err Example: Global Hook, Expanded Dump.","text":"<p>Lets modify our global.py example to get more information beyound default error traceback.</p> globalextend.py<pre><code>from gufo.err import err\n\nerr.setup(catch_all=True, format=\"extend\")\n\n\ndef fail():\n    x = 1\n    x += 1\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\nfail()\n</code></pre> <p>The code is straightforward:</p> globalextend.py<pre><code>from gufo.err import err\n\nerr.setup(catch_all=True, format=\"extend\")\n\n\ndef fail():\n    x = 1\n    x += 1\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\nfail()\n</code></pre> <p>All error configuration is performed via <code>err</code> singleton, so we need to import it first.</p> globalextend.py<pre><code>from gufo.err import err\n\nerr.setup(catch_all=True, format=\"extend\")\n\n\ndef fail():\n    x = 1\n    x += 1\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\nfail()\n</code></pre> <p><code>err.setup()</code> function must be called to initialize and confugure the error protection. <code>catch_all</code> argument set to true to replace the Python global error handling. <code>format</code> argument sets traceback format to extended version. See Err.setup() for details.</p> globalextend.py<pre><code>from gufo.err import err\n\nerr.setup(catch_all=True, format=\"extend\")\n\n\ndef fail():\n    x = 1\n    x += 1\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\nfail()\n</code></pre> <p>Lets define the function which will intentionally fail. We define the <code>x</code> variable to catch it in the trace later.</p> globalextend.py<pre><code>from gufo.err import err\n\nerr.setup(catch_all=True, format=\"extend\")\n\n\ndef fail():\n    x = 1\n    x += 1\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\nfail()\n</code></pre> <p>And call it.</p>"},{"location":"examples/globalextend/#running","title":"Running","text":"<p>Run example as:</p> <pre><code>$ python3 examples/globalextend.py\n</code></pre> <p>And got the output:</p> <pre><code>Error: 70173ec8-930f-5579-bb26-623847905f64\nRuntimeError: failing\nTraceback (most resent call last):\n-------------------------------------------------------------------------------\nFile: /workspaces/gufo_err/examples/globalextend.py (line 12)\n    5     \n    6     def fail():\n    7         x = 1\n    8         x += 1\n    9         raise RuntimeError(\"failing\")\n   10     \n   11     \n   12 ==&gt; fail()\nLocals:\n            __name__ = '__main__'\n             __doc__ = None\n         __package__ = None\n          __loader__ = &lt;_frozen_importlib_external.SourceFileLoader object at 0x7f47a335cc10&gt;\n            __spec__ = None\n     __annotations__ = {}\n        __builtins__ = &lt;module 'builtins' (built-in)&gt;\n            __file__ = '/workspaces/gufo_err/examples/globalextend.py'\n          __cached__ = None\n                 err = &lt;gufo.err.err.Err object at 0x7f47a2fbd240&gt;\n                fail = &lt;function fail at 0x7f47a3497d90&gt;\n-------------------------------------------------------------------------------\nFile: /workspaces/gufo_err/examples/globalextend.py (line 9)\n    2     \n    3     err.setup(catch_all=True, format=\"extend\")\n    4     \n    5     \n    6     def fail():\n    7         x = 1\n    8         x += 1\n    9 ==&gt;     raise RuntimeError(\"failing\")\n   10     \n   11     \n   12     fail()\nLocals:\n                   x = 2\n-------------------------------------------------------------------------------\n</code></pre> <p>Wow, much more details. Note, the fingerprint is differs. We also got a source code context and local variables for each frame. Such great improvement to analysis.</p>"},{"location":"examples/process/","title":"Gufo Err Example: Process the Exception.","text":"<p>Python default error hook is the last resort in the error handling, called just before thread or process termination. What if we want to catch and process errors early? </p> <p>Lets modify our globalextend.py example to get more information beyound default error traceback.</p> process.py<pre><code>from gufo.err import err\n\nerr.setup(format=\"extend\")\n\n\ndef fail():\n    x = 1\n    x += 1\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\ntry:\n    fail()\nexcept Exception:\n    err.process()\n</code></pre> <p>The code is straightforward:</p> process.py<pre><code>from gufo.err import err\n\nerr.setup(format=\"extend\")\n\n\ndef fail():\n    x = 1\n    x += 1\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\ntry:\n    fail()\nexcept Exception:\n    err.process()\n</code></pre> <p>All error configuration is performed via <code>err</code> singleton, so we need to import it first.</p> process.py<pre><code>from gufo.err import err\n\nerr.setup(format=\"extend\")\n\n\ndef fail():\n    x = 1\n    x += 1\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\ntry:\n    fail()\nexcept Exception:\n    err.process()\n</code></pre> <p><code>err.setup()</code> function must be called to initialize and confugure the error protection. <code>format</code> argument sets traceback format to extended version. Note, we do not set <code>catch_all</code> exception and do not install the global hook. See Err.setup() for details.</p> process.py<pre><code>from gufo.err import err\n\nerr.setup(format=\"extend\")\n\n\ndef fail():\n    x = 1\n    x += 1\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\ntry:\n    fail()\nexcept Exception:\n    err.process()\n</code></pre> <p>Lets define the function which will intentionally fail. We define the <code>x</code> variable to catch it in the trace later.</p> process.py<pre><code>from gufo.err import err\n\nerr.setup(format=\"extend\")\n\n\ndef fail():\n    x = 1\n    x += 1\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\ntry:\n    fail()\nexcept Exception:\n    err.process()\n</code></pre> <p>Unlike the previous example, we wrap our function directly in <code>try ... except</code> block. We do not know which exception we may catch, so <code>Exception</code> is the good start.</p> process.py<pre><code>from gufo.err import err\n\nerr.setup(format=\"extend\")\n\n\ndef fail():\n    x = 1\n    x += 1\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\ntry:\n    fail()\nexcept Exception:\n    err.process()\n</code></pre> <p>Lets call our function.</p> <p>process.py<pre><code>from gufo.err import err\n\nerr.setup(format=\"extend\")\n\n\ndef fail():\n    x = 1\n    x += 1\n    msg = \"failing\"\n    raise RuntimeError(msg)\n\n\ntry:\n    fail()\nexcept Exception:\n    err.process()\n</code></pre> <code>err.process()</code> runs all error handling machinery, so just call this.</p>"},{"location":"examples/process/#running","title":"Running","text":"<p>Run example as:</p> <pre><code>$ python3 examples/process.py\n</code></pre> <p>And got the output:</p> <pre><code>Error: eda58358-92cc-5e8b-a466-e50c699268a1\nRuntimeError: failing\nTraceback (most resent call last):\n-------------------------------------------------------------------------------\nFile: /workspaces/gufo_err/examples/process.py (line 13)\n    6     def fail():\n    7         x = 1\n    8         x += 1\n    9         raise RuntimeError(\"failing\")\n   10     \n   11     \n   12     try:\n   13 ==&gt;     fail()\n   14     except Exception:\n   15         err.process()\nLocals:\n            __name__ = '__main__'\n             __doc__ = None\n         __package__ = None\n          __loader__ = &lt;_frozen_importlib_external.SourceFileLoader object at 0x7f24b83a4c10&gt;\n            __spec__ = None\n     __annotations__ = {}\n        __builtins__ = &lt;module 'builtins' (built-in)&gt;\n            __file__ = '/workspaces/gufo_err/examples/process.py'\n          __cached__ = None\n                 err = &lt;gufo.err.err.Err object at 0x7f24b80052d0&gt;\n                fail = &lt;function fail at 0x7f24b84e3d90&gt;\n-------------------------------------------------------------------------------\nFile: /workspaces/gufo_err/examples/process.py (line 9)\n    2     \n    3     err.setup(format=\"extend\")\n    4     \n    5     \n    6     def fail():\n    7         x = 1\n    8         x += 1\n    9 ==&gt;     raise RuntimeError(\"failing\")\n   10     \n   11     \n   12     try:\n   13         fail()\n   14     except Exception:\n   15         err.process()\nLocals:\n                   x = 2\n-------------------------------------------------------------------------------\n</code></pre> <p>Just same behaviour as in previous example, but we have isolated the error domain and imply error processing as soon as possible.</p>"},{"location":"man/","title":"Man Pages","text":"<p>Gufo Err is provided with additional command-line tools, which are installed automatically on setup.</p> <ul> <li>err - manipulation on Error Info JSON files.</li> </ul>"},{"location":"man/err/","title":"err Man Page","text":""},{"location":"man/err/#name","title":"Name","text":"<p><code>err</code> - Gufo Err reporting tool.</p>"},{"location":"man/err/#synopsys","title":"Synopsys","text":"<pre><code>usage: err [-h] [-p PREFIX] {version,list,view,clear} ...\n\npositional arguments:\n  {version,list,view,clear}\n    version             Show Gufo Err version\n    list                Show the list of the registered errors\n    view                View error report\n    clear               Remove error info\n\noptions:\n  -h, --help            show this help message and exit\n  -p PREFIX, --prefix PREFIX\n                        JSON directory path\n</code></pre>"},{"location":"man/err/#description","title":"Description","text":"<p><code>err</code> manipulates with the error information, collected by ErrorInfoMiddleware.</p> <p>The following commands are supported:</p> <ul> <li><code>version</code>: Display Gufo Err version and exit.</li> <li><code>list</code>: Show terse list of collected error reports.</li> <li> <p><code>view</code>: View one or more error details. Dumped format   may be set with <code>-f</code> option:</p> </li> <li> <p><code>terse</code> (default): Terse format similar to standart python's tracebacks.</p> </li> <li> <p><code>extend</code>: Extended format with code surroundings and stack variables dump.</p> </li> <li> <p><code>clear</code>: Remove on or more error reports.</p> </li> </ul>"},{"location":"man/err/#environment","title":"Environment","text":"<ul> <li><code>GUFO_ERR_PREFIX</code>: Default value to <code>--prefix</code> options. Points to the directory   where error reports are stored.</li> </ul>"},{"location":"man/err/#exit-status","title":"Exit Status","text":""},{"location":"man/err/#error-fingerprint-expressions","title":"Error Fingerprint Expressions","text":"<p>Fingerprint expressions can be resolved to zero or more fingerprints in <code>list</code>, <code>view</code>, and <code>clear</code> subcommands. Following types of expressions are supported:</p> <ul> <li><code>&lt;UUID&gt;</code>, like '0dc69dd9-85f9-5491-bc06-7a493e708738': resolves to single fingerprint.</li> <li><code>all</code>: Resolves to all registered errors.</li> <li><code>*</code>: Same as <code>all</code>.</li> </ul>"},{"location":"man/err/#examples","title":"Examples","text":""},{"location":"man/err/#generating-reports","title":"Generating Reports","text":"<p>Enable ErrorInfoMiddleware in your code and point to the designated directory to store serialized ErrorInfo files. Add to you code:</p> <pre><code>from gufo.err import err\n\nerr.setup(error_info_path=\"/var/err/\", error_info_compress=\"gz\")\n</code></pre> <p>Ensure your process has permission to write to the designated directory (<code>/var/err/</code> in our example).</p>"},{"location":"man/err/#gufo-err-setup","title":"Gufo Err Setup","text":"<p>Set up <code>GUFO_ERR_PREFIX</code> environment variable in your shell to avoid a need to use <code>--prefix</code> option all the time.</p> <pre><code>$ export GUFO_ERR_PREFIX=/var/err/\n</code></pre>"},{"location":"man/err/#show-version","title":"Show Version","text":"<pre><code>err version\n</code></pre> <p>Output: <pre><code>Gufo Err 0.4.0\n</code></pre></p>"},{"location":"man/err/#show-list-of-errors","title":"Show List of Errors","text":"<pre><code>err list\n</code></pre> <p>Output: <pre><code>Fingreprint                          Exception            Service                       Time                           Place                                             \n------------------------------------ -------------------- ----------------------------- ------------------------------ --------------------------------------------------\n0dc69dd9-85f9-5491-bc06-7a493e708738 NameError: foobar    fmt-gz                        2023-09-01T07:54:59.690078     /workspaces/gufo_err/tests/test_cli.py:57         \n30dae827-0264-549a-b96f-a9b0298341b2 NotImplementedError  fmt-xz                        2023-09-01T07:54:59.690078     /workspaces/gufo_err/tests/test_cli.py:57         \n4d2895ed-519d-508e-9ab9-ecc30c65b7cf ValueError           fmt-None                      2023-09-01T07:54:59.690078     /workspaces/gufo_err/tests/test_cli.py:57         \nd6ee6183-170c-5c5f-8645-f0e1506f433e TypeError            fmt-bz2                       2023-09-01T07:54:59.690078     /workspaces/gufo_err/tests/test_cli.py:57 \n</code></pre></p>"},{"location":"man/err/#show-list-of-particular-errors","title":"Show List of Particular Errors","text":"<pre><code>err list &lt;fingerprint1&gt; ... &lt;fingerprintN&gt;\n</code></pre> <p>Where <code>&lt;fingerprintX&gt;</code> is an Fingerprint Expression. Output: <pre><code>Fingreprint                          Exception            Service                       Time                           Place                                             \n------------------------------------ -------------------- ----------------------------- ------------------------------ --------------------------------------------------\n0dc69dd9-85f9-5491-bc06-7a493e708738 NameError: foobar    fmt-gz                        2023-09-01T07:54:59.690078     /workspaces/gufo_err/tests/test_cli.py:57         \n4d2895ed-519d-508e-9ab9-ecc30c65b7cf ValueError           fmt-None                      2023-09-01T07:54:59.690078     /workspaces/gufo_err/tests/test_cli.py:57         \n</code></pre></p>"},{"location":"man/err/#show-error-detail","title":"Show Error Detail","text":"<pre><code>err view &lt;fingerprint&gt;\n</code></pre> <p>Where <code>&lt;fingerprint&gt;</code> is an Fingerprint Expression. Output: <pre><code>Error: be8ccd86-3661-434c-8569-40dd65d9860a\nTraceback (most resent call last):\n  File \"/app/tests/test_frames.py\", line 174, in test_iter_frames\n    entry()\n    ^^^^^^^\n  File \"/app/tests/sample/trace.py\", line 15, in entry\n    to_oops()\n    ^^^^^^^^^\n  File \"/app/tests/sample/trace.py\", line 9, in to_oops\n    oops()\n    ^^^^^^\n  File \"/app/tests/sample/trace.py\", line 3, in oops\n    raise RuntimeError(msg)\n    ^^^^^^^^^^^^^^^^^^^^^^^\nRuntimeError: oops\n</code></pre></p>"},{"location":"man/err/#show-multiple-error-details","title":"Show Multiple Error Details","text":"<p><pre><code>$ err view &lt;fingerprint1&gt; ... &lt;fingerprintN&gt;\n</code></pre> Where <code>&lt;fingerprintX&gt;</code> is an Fingerprint Expression.</p>"},{"location":"man/err/#show-terse-version-of-error-detail","title":"Show Terse Version of Error Detail","text":"<p><pre><code>$ err view -f terse &lt;fingerprint&gt;\n</code></pre> Where <code>&lt;fingerprint&gt;</code> is an Fingerprint Expression. Output: <pre><code>Error: be8ccd86-3661-434c-8569-40dd65d9860a\nTraceback (most resent call last):\n  File \"/app/tests/test_frames.py\", line 174, in test_iter_frames\n    entry()\n    ^^^^^^^\n  File \"/app/tests/sample/trace.py\", line 15, in entry\n    to_oops()\n    ^^^^^^^^^\n  File \"/app/tests/sample/trace.py\", line 9, in to_oops\n    oops()\n    ^^^^^^\n  File \"/app/tests/sample/trace.py\", line 3, in oops\n    raise RuntimeError(msg)\n    ^^^^^^^^^^^^^^^^^^^^^^^\nRuntimeError: oops\n</code></pre></p>"},{"location":"man/err/#show-extended-version-of-error-detail","title":"Show Extended Version of Error Detail","text":"<pre><code>$ err view -f extend &lt;fingerprint&gt;\n</code></pre> <p>Where <code>&lt;fingerprint&gt;</code> is an Fingerprint Expression.</p> <pre><code>Error: be8ccd86-3661-434c-8569-40dd65d9860a\nRuntimeError: oops\nTraceback (most resent call last):\n-------------------------------------------------------------------------------\nFile: /app/tests/test_frames.py (line 174)\n  167         ),\n  168     ]\n  169     \n  170     \n  171     def test_iter_frames():\n  172         \"\"\"Call the function which raises an exception.\"\"\"\n  173         try:\n  174 ==&gt;         entry()\n                  ^^^^^^^\n  175             msg = \"No trace\"\n  176             raise AssertionError(msg)\n  177         except RuntimeError:\n  178             frames = list(iter_frames(exc_traceback()))\n  179             assert frames == SAMPLE_FRAMES\n-------------------------------------------------------------------------------\nFile: /app/tests/sample/trace.py (line 15)\n    8         x += 1\n    9         oops()\n   10     \n   11     \n   12     def entry():\n   13         s = 2\n   14         s += 1\n   15 ==&gt;     to_oops()\n              ^^^^^^^^^\nLocals:\n                   s = 3\n-------------------------------------------------------------------------------\nFile: /app/tests/sample/trace.py (line 9)\n    2         msg = \"oops\"\n    3         raise RuntimeError(msg)\n    4     \n    5     \n    6     def to_oops():\n    7         x = 1\n    8         x += 1\n    9 ==&gt;     oops()\n              ^^^^^^\n   10     \n   11     \n   12     def entry():\n   13         s = 2\n   14         s += 1\n   15         to_oops()\nLocals:\n                   x = 2\n-------------------------------------------------------------------------------\nFile: /app/tests/sample/trace.py (line 3)\n    1     def oops():\n    2         msg = \"oops\"\n    3 ==&gt;     raise RuntimeError(msg)\n              ^^^^^^^^^^^^^^^^^^^^^^^\n    4     \n    5     \n    6     def to_oops():\n    7         x = 1\n    8         x += 1\n    9         oops()\n   10     \nLocals:\n                 msg = 'oops'\n-------------------------------------------------------------------------------\n</code></pre>"},{"location":"man/err/#clearing-single-error","title":"Clearing Single Error","text":"<p><pre><code>$ err clear &lt;fingerprint&gt;\n</code></pre> Where <code>&lt;fingerprint&gt;</code> is an Fingerprint Expression.</p>"},{"location":"man/err/#clearing-multiple-errors","title":"Clearing Multiple Errors","text":"<p><pre><code>$ err clear &lt;fingerprint1&gt; ... &lt;fingerprintN&gt;\n</code></pre> Where <code>&lt;fingerprintX&gt;</code> is an Fingerprint Expression.</p>"},{"location":"man/err/#clearing-all-errors","title":"Clearing All Errors","text":"<pre><code>$ err clear all\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>gufo.err<ul> <li>abc<ul> <li>failfast</li> <li>formatter</li> <li>middleware</li> </ul> </li> <li>cli</li> <li>codec</li> <li>compressor</li> <li>err</li> <li>failfast<ul> <li>always</li> <li>never</li> <li>typematch</li> <li>types</li> </ul> </li> <li>formatter<ul> <li>extend</li> <li>loader</li> <li>terse</li> </ul> </li> <li>frame</li> <li>logger</li> <li>middleware<ul> <li>errorinfo</li> <li>sentry</li> <li>traceback</li> </ul> </li> <li>types</li> </ul> </li> </ul>"},{"location":"reference/gufo/err/","title":"gufo.err","text":"<p>Human-readable error reporting.</p> <p>Attributes:</p> Name Type Description <code>__version__</code> <code>str</code> <p>Current version.</p> <code>HAS_CODE_POSITION</code> <p>True, if Python interpreter supports exact code positions  (Python 3.11+)</p>"},{"location":"reference/gufo/err/#gufo.err.Anchor","title":"<code>Anchor</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>Exact problem position (Python 3.11+).</p> <p>Denotes operator of subscript which causes the problem.</p> <p>Parameters:</p> Name Type Description Default <code>left</code> <code>int</code> <p>Starting column.</p> required <code>right</code> <code>int</code> <p>Stopping column.</p> required"},{"location":"reference/gufo/err/#gufo.err.BaseFailFast","title":"<code>BaseFailFast</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base type for fail-fast behavior.</p> <p>Fail-fast classes must implement <code>must_die</code> method. When fail-fast check decides the error is unrecoverable, it must return <code>True</code> value.</p>"},{"location":"reference/gufo/err/#gufo.err.BaseFailFast.must_die","title":"<code>must_die(t, v, tb)</code>  <code>abstractmethod</code>","text":"<p>Fail-fast check. Must be overriden in subclasses.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>Type[BaseException]</code> <p>Exception type. Same as <code>sys.exc_info()[0]</code>.</p> required <code>v</code> <code>BaseException</code> <p>Exception value. Same as <code>sys.exc_info()[1]</code>.</p> required <code>tb</code> <code>TracebackType</code> <p>Traceback. Same as <code>sys.exc_info()[2]</code>.</p> required <p>Returns:</p> Type Description <code>bool</code> <ul> <li><code>True</code>, if the error is not recoverable and the process</li> </ul> <code>bool</code> <p>must be terminated ASAP.</p> <code>bool</code> <ul> <li><code>False</code> to pass to the next check.</li> </ul>"},{"location":"reference/gufo/err/#gufo.err.BaseMiddleware","title":"<code>BaseMiddleware</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base type for error processing middleware.</p> <p>Middleware must implement <code>process</code> method.</p>"},{"location":"reference/gufo/err/#gufo.err.BaseMiddleware.process","title":"<code>process(info)</code>  <code>abstractmethod</code>","text":"<p>Process the error.</p> <p>Parameters:</p> Name Type Description Default <code>info</code> <code>ErrorInfo</code> <p>ErrorInfo instance with detailed error information.</p> required"},{"location":"reference/gufo/err/#gufo.err.CodePosition","title":"<code>CodePosition</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>Exact code position for Python 3.11+.</p> <p>Parameters:</p> Name Type Description Default <code>start_line</code> <code>int</code> <p>First line of code</p> required <code>end_line</code> <code>int</code> <p>Last line of code</p> required <code>start_col</code> <code>int</code> <p>Starting column (on start_line)</p> required <code>end_col</code> <code>int</code> <p>Ending column (on end_line)</p> required <code>anchor</code> <code>Optional[Anchor]</code> <p>Problem anchor</p> required"},{"location":"reference/gufo/err/#gufo.err.Err","title":"<code>Err</code>","text":"<p>               Bases: <code>object</code></p> <p>Error handling singleton.</p> Example <pre><code>from gufo.err import err\n\nerr.setup()\n</code></pre>"},{"location":"reference/gufo/err/#gufo.err.Err.__default_middleware","title":"<code>__default_middleware(format=None, error_info_path=None, error_info_compress=None)</code>","text":"<p>Get default middleware chain.</p> <p>Parameters:</p> Name Type Description Default <code>format</code> <code>Optional[str]</code> <p>traceback format. See TracebackMiddleware for details. Do not configure tracebacks if None.</p> <code>None</code> <code>error_info_path</code> <code>Optional[str]</code> <p>Directory path to write error info. See ErrorInfoMiddleware for details. Do not configure middleware if None.</p> <code>None</code> <code>error_info_compress</code> <code>Optional[str]</code> <p>Error info compression algorithm. Used along with <code>error_info_path</code>.</p> <code>None</code>"},{"location":"reference/gufo/err/#gufo.err.Err.__del__","title":"<code>__del__()</code>","text":"<p>Cleanup.</p>"},{"location":"reference/gufo/err/#gufo.err.Err.__fingerprint","title":"<code>__fingerprint(t, v, stack)</code>","text":"<p>Calculate the error fingerprint.</p> <p>Calculate error fingerprint for given exception and the stack. Fingerprint is stable for repeating conditions.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>Type[BaseException]</code> <p>Exception type.</p> required <code>v</code> <code>BaseException</code> <p>Exception instance:</p> required <code>stack</code> <code>List[FrameInfo]</code> <p>Current stack.</p> required <p>Returns:</p> Type Description <code>UUID</code> <p>Error fingerprint as UUID.</p>"},{"location":"reference/gufo/err/#gufo.err.Err.__must_die","title":"<code>__must_die(t, v, tb)</code>","text":"<p>Check if the error is fatal and the process must die.</p> <p>Process fail-fast sequence and return True if the process must die quickly.</p>"},{"location":"reference/gufo/err/#gufo.err.Err.__process","title":"<code>__process(t, v, tb=None)</code>","text":"<p>Process given exception context.</p> <p>Called either from .process() or as sys.excepthook for unhandled exceptions.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>Type[BaseException]</code> <p>Exception type.</p> required <code>v</code> <code>BaseException</code> <p>Exception value.</p> required <code>tb</code> <code>Optional[TracebackType]</code> <p>Traceback frame.</p> <code>None</code> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If setup() is not called.</p>"},{"location":"reference/gufo/err/#gufo.err.Err.__run_middleware","title":"<code>__run_middleware(err_info)</code>","text":"<p>Process all the middleware.</p> <p>Parameters:</p> Name Type Description Default <code>err_info</code> <code>ErrorInfo</code> <p>Filled ErrorInfo structure</p> required"},{"location":"reference/gufo/err/#gufo.err.Err.add_fail_fast","title":"<code>add_fail_fast(ff)</code>","text":"<p>Add fail-fast handler to the end of the chain.</p> <p>Parameters:</p> Name Type Description Default <code>ff</code> <code>BaseFailFast</code> <p>BaseFailFast instance.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>ff</code> is not BaseFailFast instance.</p>"},{"location":"reference/gufo/err/#gufo.err.Err.add_middleware","title":"<code>add_middleware(mw)</code>","text":"<p>Add middleware to the end of the chain.</p> <p>Parameters:</p> Name Type Description Default <code>mw</code> <code>BaseMiddleware</code> <p>BaseMiddleware instance</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>mw</code> is not BaseMiddleware instance.</p>"},{"location":"reference/gufo/err/#gufo.err.Err.iter_fingerprint_parts","title":"<code>iter_fingerprint_parts(t, v, stack)</code>","text":"<p>Iterate over the fingerprint parts.</p> <p>Iterable to yield all fingerprint parts. May be overriden in subclasses.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>Type[BaseException]</code> <p>Exception type.</p> required <code>v</code> <code>BaseException</code> <p>Exception instance:</p> required <code>stack</code> <code>List[FrameInfo]</code> <p>Current stack.</p> required <p>Returns:</p> Type Description <code>Iterable[str]</code> <p>Iterable of strings.</p>"},{"location":"reference/gufo/err/#gufo.err.Err.process","title":"<code>process()</code>","text":"<p>Process current exception context in the fenced code block.</p> Example <pre><code>from gufo.err import err\n\n...\ntry:\n    my_function()\nexcept Exception:\n    err.process()\n</code></pre>"},{"location":"reference/gufo/err/#gufo.err.Err.setup","title":"<code>setup(*, catch_all=False, root_module=None, name=DEFAULT_NAME, version=DEFAULT_VERSION, hash=DEFAULT_HASH, fail_fast=None, fail_fast_code=DEFAULT_EXIT_CODE, middleware=None, format='terse', error_info_path=None, error_info_compress=None)</code>","text":"<p>Setup error handling singleton.</p> <p>Must be called only once.</p> <p>Parameters:</p> Name Type Description Default <code>catch_all</code> <code>bool</code> <p>Install global system exception hook.</p> <code>False</code> <code>name</code> <code>str</code> <p>Application or service name.</p> <code>DEFAULT_NAME</code> <code>version</code> <code>str</code> <p>Application or service version.</p> <code>DEFAULT_VERSION</code> <code>root_module</code> <code>Optional[str]</code> <p>Top-level application module/namespace for split stack fingerprinting. Topmost frame from the root or the nested modules will be considered in the error fingerprint.</p> <code>None</code> <code>hash</code> <code>str</code> <p>Fingerprint hashing function name. Available functions are: sha256, sha3_512, blake2s, sha3_224, md5, sha384, sha3_256, shake_256, blake2b, sha224, shake_128, sha3_384, sha1, sha512. Refer to the Python's hashlib for details.</p> <code>DEFAULT_HASH</code> <code>fail_fast</code> <code>Optional[Iterable[BaseFailFast]]</code> <p>Iterable of BaseFailFast instances for fail-fast detection. Process will terminate with <code>fail_fast_code</code> error code if any of instances in the chain will return True.</p> <code>None</code> <code>fail_fast_code</code> <code>int</code> <p>System exit code on fail-fast termination.</p> <code>DEFAULT_EXIT_CODE</code> <code>middleware</code> <code>Optional[Iterable[BaseMiddleware]]</code> <p>Iterable of BaseMiddleware instances for error processing middleware. Instances are evaluated in the order of appearance.</p> <code>None</code> <code>format</code> <code>Optional[str]</code> <p>If not None install TracebackMiddleware for given output format.</p> <code>'terse'</code> <code>error_info_path</code> <code>Optional[str]</code> <p>If not None install ErrorInfoMiddleware. <code>error_info_path</code> should point to a writable directories, in which the error info files to be written.</p> <code>None</code> <code>error_info_compress</code> <code>Optional[str]</code> <p>Used only with <code>error_info_path</code>. Set error info compression method. One of:</p> <ul> <li><code>None</code> - do not compress</li> <li><code>gz</code> - GZip</li> <li><code>bz2</code> - BZip2</li> <li><code>xz</code> - LZMA/xz</li> </ul> <code>None</code> <p>Returns:</p> Type Description <code>Err</code> <p>Err instance.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>When called twice.</p> <code>ValueError</code> <p>On configuration parameters error.</p>"},{"location":"reference/gufo/err/#gufo.err.ErrorInfo","title":"<code>ErrorInfo</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>Current execution frame information.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Application or service name, as set by setup()</p> required <code>version</code> <code>str</code> <p>Application or service version, as set by setup()</p> required <code>fingerprint</code> <code>UUID</code> <p>Error fingerprint.</p> required <code>stack</code> <code>List[FrameInfo]</code> <p>List of <code>FrameInfo</code>. Current execution frame is first.</p> required <code>exception</code> <code>BaseException</code> <p>Exception instance, if caught.</p> required <code>timestamp</code> <code>Optional[datetime]</code> <p>Error timestamp.</p> <code>None</code> <code>root_module</code> <code>Optional[str]</code> <p>Optional root module, as set by setup()</p> <code>None</code>"},{"location":"reference/gufo/err/#gufo.err.ErrorInfo.get_app_top_frame","title":"<code>get_app_top_frame()</code>","text":"<p>Get application's top stack frame.</p> <p>Find top stack frame belonging to the application, if <code>root_module</code> is set, or return stack top otherwise.</p> <p>Returns:</p> Type Description <code>Optional[FrameInfo]</code> <ul> <li>FrameInfo if the stack is not empty.</li> </ul> <code>Optional[FrameInfo]</code> <ul> <li>None otherwise.</li> </ul>"},{"location":"reference/gufo/err/#gufo.err.FrameInfo","title":"<code>FrameInfo</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>Execution frame.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Current callable name.</p> required <code>source</code> <code>Optional[SourceInfo]</code> <p>Optional <code>SourceInfo</code> procedure. May be missed on loader problems.</p> required <code>locals</code> <code>Dict[str, Any]</code> <p>Dicts of local variables.</p> required <code>module</code> <code>Optional[str]</code> <p>Python module name.</p> <code>None</code>"},{"location":"reference/gufo/err/#gufo.err.SourceInfo","title":"<code>SourceInfo</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>Source context for frame.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>Normalized file name.</p> required <code>first_line</code> <code>int</code> <p>first line of source context.</p> required <code>current_line</code> <code>int</code> <p>current execution line.</p> required <code>lines</code> <code>List[str]</code> <p>List of lines, starting from <code>first_line</code></p> required <code>pos</code> <code>Optional[CodePosition]</code> <p>Optional exact code position for Python 3.11+</p> <code>None</code>"},{"location":"reference/gufo/err/#gufo.err.exc_traceback","title":"<code>exc_traceback()</code>","text":"<p>Cast type to <code>sys.exc_info()</code>.</p> <p>Extract and return top-level excecution frame from current exception context.</p> <p>Returns:</p> Type Description <code>TracebackType</code> <p>Top-level exception frame.</p>"},{"location":"reference/gufo/err/#gufo.err.iter_frames","title":"<code>iter_frames(tb, context_lines=7)</code>","text":"<p>Iterate over traceback frames.</p> <p>Parameters:</p> Name Type Description Default <code>tb</code> <code>TracebackType</code> <p>current execution frame.</p> required <code>context_lines</code> <code>int</code> <p>Source code context to extract. Current line, up to <code>context_lines</code> below the current line, and up to <code>context_lines</code> above the current line will be extracted.</p> <code>7</code> <p>Returns:</p> Type Description <code>Iterable[FrameInfo]</code> <p>Iterable of FrameInfo, starting from top of the</p> <code>Iterable[FrameInfo]</code> <p>stack (current code position).</p>"},{"location":"reference/gufo/err/cli/","title":"gufo.err.cli","text":"<p><code>err</code> utility.</p>"},{"location":"reference/gufo/err/cli/#gufo.err.cli.Cli","title":"<code>Cli</code>","text":"<p>               Bases: <code>object</code></p> <p><code>err</code> utility class.</p>"},{"location":"reference/gufo/err/cli/#gufo.err.cli.Cli.__check_dir","title":"<code>__check_dir(path)</code>  <code>staticmethod</code>","text":"<p>Check if directory exists and accessible.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Directory path</p> required <p>Returns:</p> Type Description <code>ExitCode</code> <ul> <li>OK - on success</li> </ul> <code>ExitCode</code> <ul> <li>NOT_EXISTS - if the directory is not exists</li> </ul> <code>ExitCode</code> <ul> <li>EACCESS - if the directory is not accessible</li> </ul>"},{"location":"reference/gufo/err/cli/#gufo.err.cli.Cli.col","title":"<code>col(t, width)</code>  <code>staticmethod</code>","text":"<p>Format text to column.</p> <p>Enlarge with spaces, when necessary. Cut if too long.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>str</code> <p>Text</p> required <code>width</code> <code>int</code> <p>Column width</p> required <p>Returns:</p> Type Description <code>str</code> <p>Aligned text.</p> <p>Examples:</p> <p><pre><code>col(\"abcdef\", 5)\n</code></pre> returns <pre><code>\"ab...\"\n</code></pre></p>"},{"location":"reference/gufo/err/cli/#gufo.err.cli.Cli.get_handler","title":"<code>get_handler(name)</code>","text":"<p>Get handler for command.</p> <p>Return the handler for furher command processing.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Command name</p> required <p>Returns:</p> Type Description <code>Callable[[Namespace], ExitCode]</code> <p>Callable, accepting argparse.Namespace</p> <code>Callable[[Namespace], ExitCode]</code> <p>and returning ExitCode.</p>"},{"location":"reference/gufo/err/cli/#gufo.err.cli.Cli.get_index","title":"<code>get_index(prefix)</code>  <code>staticmethod</code>","text":"<p>Get fingerprint index.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>Error Info directory prefix</p> required <p>Returns:</p> Type Description <code>Dict[str, str]</code> <p>Dict of fingerprint -&gt; file name</p>"},{"location":"reference/gufo/err/cli/#gufo.err.cli.Cli.handle_clear","title":"<code>handle_clear(ns)</code>","text":"<p>Clear selected errors.</p> <p>Parameters:</p> Name Type Description Default <code>ns</code> <code>Namespace</code> <p>argsparse.Namespace with fields:</p> <ul> <li><code>prefix</code> - directory of errorinfo files.</li> <li><code>fingerprints</code> - List of fingerprint expressions.</li> </ul> required <p>Returns:</p> Type Description <code>ExitCode</code> <p>Exit code.</p>"},{"location":"reference/gufo/err/cli/#gufo.err.cli.Cli.handle_list","title":"<code>handle_list(ns)</code>","text":"<p>Show the list of the registered errors.</p> <p>Parameters:</p> Name Type Description Default <code>ns</code> <code>Namespace</code> <p>argsparse.Namespace with fields:</p> <ul> <li><code>prefix</code> - directory of errorinfo files.</li> <li><code>fingerprints</code> - list of fingerprint expressions.</li> </ul> required <p>Returns:</p> Type Description <code>ExitCode</code> <p>Exit code.</p>"},{"location":"reference/gufo/err/cli/#gufo.err.cli.Cli.handle_version","title":"<code>handle_version(_ns)</code>","text":"<p>Print Gufo Err version.</p> <p>Parameters:</p> Name Type Description Default <code>_ns</code> <code>Namespace</code> <p>Options namespace, ignored.</p> required <p>Returns:</p> Type Description <code>ExitCode</code> <p>Exit code.</p>"},{"location":"reference/gufo/err/cli/#gufo.err.cli.Cli.handle_view","title":"<code>handle_view(ns)</code>","text":"<p>Show the details of the selected errors.</p> <p>Parameters:</p> Name Type Description Default <code>ns</code> <code>Namespace</code> <p>argsparse.Namespace with fields:</p> <ul> <li><code>prefix</code> - directory of errorinfo files.</li> <li> <p><code>format</code> - output format:</p> <ul> <li><code>terse</code></li> <li><code>extend</code></li> </ul> </li> <li> <p><code>fingerprints</code> - List of fingerprint expressions.</p> </li> </ul> required <p>Returns:</p> Type Description <code>ExitCode</code> <p>Exit code.</p>"},{"location":"reference/gufo/err/cli/#gufo.err.cli.Cli.iter_fingerprints","title":"<code>iter_fingerprints(items, prefix)</code>  <code>staticmethod</code>","text":"<p>Resolve fingerprint expressions and iterate result.</p> <p>Fingerprint expressions is a list user-defined expressions passed via command line. Each item may be:</p> <ul> <li><code>&lt;UUID&gt;</code> - single fingerprint</li> <li><code>all</code> or <code>*</code> - all errors</li> </ul> <p>Parameters:</p> Name Type Description Default <code>items</code> <code>List[str]</code> <p>List of expressions.</p> required <code>prefix</code> <code>str</code> <p>Error info directory</p> required <p>Returns:</p> Type Description <code>Iterable[str]</code> <p>Yields all resolved fingerprints.</p>"},{"location":"reference/gufo/err/cli/#gufo.err.cli.Cli.rcol","title":"<code>rcol(t, width)</code>  <code>staticmethod</code>","text":"<p>Format text to column aligned to the range.</p> <p>Enlarge with spaces, when necessary. Cut if too long.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>str</code> <p>Text</p> required <code>width</code> <code>int</code> <p>Column width</p> required <p>Returns:</p> Type Description <code>str</code> <p>Aligned text.</p> <p>Examples:</p> <p><pre><code>col(\"abcdef\", 5)\n</code></pre> returns <pre><code>\"...ef\"\n</code></pre></p>"},{"location":"reference/gufo/err/cli/#gufo.err.cli.Cli.read_info","title":"<code>read_info(path)</code>  <code>staticmethod</code>","text":"<p>Read error info file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>JSON file path</p> required <p>Returns:</p> Type Description <code>Optional[ErrorInfo]</code> <ul> <li>ErrorInfo instance,   if file has been read correctly.</li> </ul> <code>Optional[ErrorInfo]</code> <ul> <li><code>None</code> otherwise.</li> </ul>"},{"location":"reference/gufo/err/cli/#gufo.err.cli.Cli.run","title":"<code>run(args)</code>","text":"<p>Main dispatcher function.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>List[str]</code> <p>List of command-line arguments.</p> required"},{"location":"reference/gufo/err/cli/#gufo.err.cli.ExitCode","title":"<code>ExitCode</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>Cli exit codes.</p> <p>Attributes:</p> Name Type Description <code>OK</code> <p>Successful exit</p> <code>NOT_EXISTS</code> <p>Error Info directory is not found</p> <code>EACCESS</code> <p>Error Info directory is not readable</p> <code>CANNOT_READ</code> <p>Cannot read Error Info file</p> <code>INVALID_ARGS</code> <p>Invalid arguments</p> <code>SYNTAX</code> <p>Invalid expression</p>"},{"location":"reference/gufo/err/cli/#gufo.err.cli.ListItem","title":"<code>ListItem</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>Data structure for <code>err list</code>.</p> <p>Attributes:</p> Name Type Description <code>fingerprint</code> <code>str</code> <p>Stringified fingerprint.</p> <code>exception</code> <code>str</code> <p>Exception string.</p> <code>name</code> <code>str</code> <p>Application name.</p> <code>ts</code> <code>datetime</code> <p>Error timestamp.</p> <code>place</code> <code>str</code> <p>Error location.</p>"},{"location":"reference/gufo/err/cli/#gufo.err.cli.main","title":"<code>main()</code>","text":"<p>Run err utility with command-line arguments.</p>"},{"location":"reference/gufo/err/codec/","title":"gufo.err.codec","text":"<p>ErrInfo serialization/deserialization primitives.</p>"},{"location":"reference/gufo/err/codec/#gufo.err.codec.__q_exception","title":"<code>__q_exception(e)</code>","text":"<p>Convery exception into JSON-serializeable form.</p> <p>Parameters:</p> Name Type Description Default <code>e</code> <code>BaseException</code> <p>BaseException instance</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Serialized dict</p>"},{"location":"reference/gufo/err/codec/#gufo.err.codec.__q_frame_info","title":"<code>__q_frame_info(fi)</code>","text":"<p>Convert FrameInfo into JSON-serializeable form.</p> <p>Parameters:</p> Name Type Description Default <code>fi</code> <code>FrameInfo</code> <p>FrameInfo instance</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Serialized dict</p>"},{"location":"reference/gufo/err/codec/#gufo.err.codec.__q_source","title":"<code>__q_source(si)</code>","text":"<p>Convert SourceInfo into JSON-serializeable form.</p> <p>Parameters:</p> Name Type Description Default <code>si</code> <code>SourceInfo</code> <p>SourceInfo instance</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Serialized dict</p>"},{"location":"reference/gufo/err/codec/#gufo.err.codec.__q_var","title":"<code>__q_var(x)</code>","text":"<p>Convert variable to the JSON-encodable form.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Any</code> <p>Exception argument</p> required <p>Returns:</p> Type Description <code>Union[str, int, float]</code> <p>JSON-serializeable form of argument</p>"},{"location":"reference/gufo/err/codec/#gufo.err.codec.__q_x_class","title":"<code>__q_x_class(e)</code>","text":"<p>Get exception class.</p> <p>Parameters:</p> Name Type Description Default <code>e</code> <code>BaseException</code> <p>Exception instance</p> required <p>Returns:</p> Type Description <code>str</code> <p>Serialized exception class name</p>"},{"location":"reference/gufo/err/codec/#gufo.err.codec.from_dict","title":"<code>from_dict(data)</code>","text":"<p>Deserealize Dict to ErrorInfo.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict[str, Any]</code> <p>Result of to_dict</p> required <p>Returns:</p> Type Description <code>ErrorInfo</code> <p>ErrorInfo instance</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>if required key is missed.</p>"},{"location":"reference/gufo/err/codec/#gufo.err.codec.from_json","title":"<code>from_json(data)</code>","text":"<p>Deserialize ErrorInfo from JSON string.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>JSON string</p> required <p>Returns:</p> Type Description <code>ErrorInfo</code> <p>ErrorInfo instance</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>if required key is missed.</p>"},{"location":"reference/gufo/err/codec/#gufo.err.codec.to_dict","title":"<code>to_dict(info)</code>","text":"<p>Serialize ErrorInfo to a dict of primitive types.</p> <p>Parameters:</p> Name Type Description Default <code>info</code> <code>ErrorInfo</code> <p>ErrorInfo instance.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict of primitive types (str, int, float).</p>"},{"location":"reference/gufo/err/codec/#gufo.err.codec.to_json","title":"<code>to_json(info)</code>","text":"<p>Serialize ErrorInfo to JSON string.</p> <p>Parameters:</p> Name Type Description Default <code>info</code> <code>ErrorInfo</code> <p>ErrorInfo instance.</p> required <p>Returns:</p> Type Description <code>str</code> <p>json-encoded string.</p>"},{"location":"reference/gufo/err/compressor/","title":"gufo.err.compressor","text":"<p>Compressor.</p>"},{"location":"reference/gufo/err/compressor/#gufo.err.compressor.Compressor","title":"<code>Compressor</code>","text":"<p>               Bases: <code>object</code></p> <p>Compressor/decompressor class.</p> <p>Use .encode() to compress data and .decode() to decompress.</p> <p>Parameters:</p> Name Type Description Default <code>format</code> <code>Optional[str]</code> <p>Compression algorithm. One of:</p> <ul> <li><code>None</code> - do not compress</li> <li><code>gz</code> - GZip</li> <li><code>bz2</code> - BZip2</li> <li><code>xz</code> - LZMA/xz</li> </ul> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If format is not supported.</p>"},{"location":"reference/gufo/err/compressor/#gufo.err.compressor.Compressor.autodetect","title":"<code>autodetect(path)</code>  <code>classmethod</code>","text":"<p>Returns Compressor instance for given format.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>File path</p> required <p>Returns:</p> Type Description <code>Compressor</code> <p>Compressor instance</p>"},{"location":"reference/gufo/err/compressor/#gufo.err.compressor.Compressor.decode_bz2","title":"<code>decode_bz2(data)</code>  <code>staticmethod</code>","text":"<p>Encoder for <code>bz2</code> format.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>bytes</code> <p>bzipped data as bytes.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>Ucompressed bytes.</p>"},{"location":"reference/gufo/err/compressor/#gufo.err.compressor.Compressor.decode_gz","title":"<code>decode_gz(data)</code>  <code>staticmethod</code>","text":"<p>Decoder for <code>gz</code> format.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>bytes</code> <p>gzipped data as bytes.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>Ucompressed bytes.</p>"},{"location":"reference/gufo/err/compressor/#gufo.err.compressor.Compressor.decode_none","title":"<code>decode_none(data)</code>  <code>staticmethod</code>","text":"<p>Decoder for <code>none</code> format.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>bytes</code> <p>Input bytes</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>data as is.</p>"},{"location":"reference/gufo/err/compressor/#gufo.err.compressor.Compressor.decode_xz","title":"<code>decode_xz(data)</code>  <code>staticmethod</code>","text":"<p>Decoder for <code>xz</code> format.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>bytes</code> <p>xzipped data as bytes.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>Ucompressed bytes.</p>"},{"location":"reference/gufo/err/compressor/#gufo.err.compressor.Compressor.encode_bz2","title":"<code>encode_bz2(data)</code>  <code>staticmethod</code>","text":"<p>Encoder for <code>bz2</code> format.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>bytes</code> <p>Input bytes</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>bzipped stream as bytes.</p>"},{"location":"reference/gufo/err/compressor/#gufo.err.compressor.Compressor.encode_gz","title":"<code>encode_gz(data)</code>  <code>staticmethod</code>","text":"<p>Encoder for <code>gz</code> format.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>bytes</code> <p>Input bytes</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>gzipped stream as bytes.</p>"},{"location":"reference/gufo/err/compressor/#gufo.err.compressor.Compressor.encode_none","title":"<code>encode_none(data)</code>  <code>staticmethod</code>","text":"<p>Encoder for <code>none</code> format.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>bytes</code> <p>Input bytes</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>data as is.</p>"},{"location":"reference/gufo/err/compressor/#gufo.err.compressor.Compressor.encode_xz","title":"<code>encode_xz(data)</code>  <code>staticmethod</code>","text":"<p>Encoder for <code>xz</code> format.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>bytes</code> <p>Input bytes</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>xzipped stream as bytes.</p>"},{"location":"reference/gufo/err/compressor/#gufo.err.compressor.Compressor.get_format","title":"<code>get_format(path)</code>  <code>classmethod</code>","text":"<p>Auto-detect format from path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>File path.</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p><code>format</code> parameter.</p>"},{"location":"reference/gufo/err/err/","title":"gufo.err.err","text":"<p>Define <code>Err</code> class and <code>err</code> singleton.</p> <p>Attributes:</p> Name Type Description <code>err</code> <p>Err singletone.</p>"},{"location":"reference/gufo/err/err/#gufo.err.err.Err","title":"<code>Err</code>","text":"<p>               Bases: <code>object</code></p> <p>Error handling singleton.</p> Example <pre><code>from gufo.err import err\n\nerr.setup()\n</code></pre>"},{"location":"reference/gufo/err/err/#gufo.err.err.Err.__default_middleware","title":"<code>__default_middleware(format=None, error_info_path=None, error_info_compress=None)</code>","text":"<p>Get default middleware chain.</p> <p>Parameters:</p> Name Type Description Default <code>format</code> <code>Optional[str]</code> <p>traceback format. See TracebackMiddleware for details. Do not configure tracebacks if None.</p> <code>None</code> <code>error_info_path</code> <code>Optional[str]</code> <p>Directory path to write error info. See ErrorInfoMiddleware for details. Do not configure middleware if None.</p> <code>None</code> <code>error_info_compress</code> <code>Optional[str]</code> <p>Error info compression algorithm. Used along with <code>error_info_path</code>.</p> <code>None</code>"},{"location":"reference/gufo/err/err/#gufo.err.err.Err.__del__","title":"<code>__del__()</code>","text":"<p>Cleanup.</p>"},{"location":"reference/gufo/err/err/#gufo.err.err.Err.__fingerprint","title":"<code>__fingerprint(t, v, stack)</code>","text":"<p>Calculate the error fingerprint.</p> <p>Calculate error fingerprint for given exception and the stack. Fingerprint is stable for repeating conditions.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>Type[BaseException]</code> <p>Exception type.</p> required <code>v</code> <code>BaseException</code> <p>Exception instance:</p> required <code>stack</code> <code>List[FrameInfo]</code> <p>Current stack.</p> required <p>Returns:</p> Type Description <code>UUID</code> <p>Error fingerprint as UUID.</p>"},{"location":"reference/gufo/err/err/#gufo.err.err.Err.__must_die","title":"<code>__must_die(t, v, tb)</code>","text":"<p>Check if the error is fatal and the process must die.</p> <p>Process fail-fast sequence and return True if the process must die quickly.</p>"},{"location":"reference/gufo/err/err/#gufo.err.err.Err.__process","title":"<code>__process(t, v, tb=None)</code>","text":"<p>Process given exception context.</p> <p>Called either from .process() or as sys.excepthook for unhandled exceptions.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>Type[BaseException]</code> <p>Exception type.</p> required <code>v</code> <code>BaseException</code> <p>Exception value.</p> required <code>tb</code> <code>Optional[TracebackType]</code> <p>Traceback frame.</p> <code>None</code> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If setup() is not called.</p>"},{"location":"reference/gufo/err/err/#gufo.err.err.Err.__run_middleware","title":"<code>__run_middleware(err_info)</code>","text":"<p>Process all the middleware.</p> <p>Parameters:</p> Name Type Description Default <code>err_info</code> <code>ErrorInfo</code> <p>Filled ErrorInfo structure</p> required"},{"location":"reference/gufo/err/err/#gufo.err.err.Err.add_fail_fast","title":"<code>add_fail_fast(ff)</code>","text":"<p>Add fail-fast handler to the end of the chain.</p> <p>Parameters:</p> Name Type Description Default <code>ff</code> <code>BaseFailFast</code> <p>BaseFailFast instance.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>ff</code> is not BaseFailFast instance.</p>"},{"location":"reference/gufo/err/err/#gufo.err.err.Err.add_middleware","title":"<code>add_middleware(mw)</code>","text":"<p>Add middleware to the end of the chain.</p> <p>Parameters:</p> Name Type Description Default <code>mw</code> <code>BaseMiddleware</code> <p>BaseMiddleware instance</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>mw</code> is not BaseMiddleware instance.</p>"},{"location":"reference/gufo/err/err/#gufo.err.err.Err.iter_fingerprint_parts","title":"<code>iter_fingerprint_parts(t, v, stack)</code>","text":"<p>Iterate over the fingerprint parts.</p> <p>Iterable to yield all fingerprint parts. May be overriden in subclasses.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>Type[BaseException]</code> <p>Exception type.</p> required <code>v</code> <code>BaseException</code> <p>Exception instance:</p> required <code>stack</code> <code>List[FrameInfo]</code> <p>Current stack.</p> required <p>Returns:</p> Type Description <code>Iterable[str]</code> <p>Iterable of strings.</p>"},{"location":"reference/gufo/err/err/#gufo.err.err.Err.process","title":"<code>process()</code>","text":"<p>Process current exception context in the fenced code block.</p> Example <pre><code>from gufo.err import err\n\n...\ntry:\n    my_function()\nexcept Exception:\n    err.process()\n</code></pre>"},{"location":"reference/gufo/err/err/#gufo.err.err.Err.setup","title":"<code>setup(*, catch_all=False, root_module=None, name=DEFAULT_NAME, version=DEFAULT_VERSION, hash=DEFAULT_HASH, fail_fast=None, fail_fast_code=DEFAULT_EXIT_CODE, middleware=None, format='terse', error_info_path=None, error_info_compress=None)</code>","text":"<p>Setup error handling singleton.</p> <p>Must be called only once.</p> <p>Parameters:</p> Name Type Description Default <code>catch_all</code> <code>bool</code> <p>Install global system exception hook.</p> <code>False</code> <code>name</code> <code>str</code> <p>Application or service name.</p> <code>DEFAULT_NAME</code> <code>version</code> <code>str</code> <p>Application or service version.</p> <code>DEFAULT_VERSION</code> <code>root_module</code> <code>Optional[str]</code> <p>Top-level application module/namespace for split stack fingerprinting. Topmost frame from the root or the nested modules will be considered in the error fingerprint.</p> <code>None</code> <code>hash</code> <code>str</code> <p>Fingerprint hashing function name. Available functions are: sha256, sha3_512, blake2s, sha3_224, md5, sha384, sha3_256, shake_256, blake2b, sha224, shake_128, sha3_384, sha1, sha512. Refer to the Python's hashlib for details.</p> <code>DEFAULT_HASH</code> <code>fail_fast</code> <code>Optional[Iterable[BaseFailFast]]</code> <p>Iterable of BaseFailFast instances for fail-fast detection. Process will terminate with <code>fail_fast_code</code> error code if any of instances in the chain will return True.</p> <code>None</code> <code>fail_fast_code</code> <code>int</code> <p>System exit code on fail-fast termination.</p> <code>DEFAULT_EXIT_CODE</code> <code>middleware</code> <code>Optional[Iterable[BaseMiddleware]]</code> <p>Iterable of BaseMiddleware instances for error processing middleware. Instances are evaluated in the order of appearance.</p> <code>None</code> <code>format</code> <code>Optional[str]</code> <p>If not None install TracebackMiddleware for given output format.</p> <code>'terse'</code> <code>error_info_path</code> <code>Optional[str]</code> <p>If not None install ErrorInfoMiddleware. <code>error_info_path</code> should point to a writable directories, in which the error info files to be written.</p> <code>None</code> <code>error_info_compress</code> <code>Optional[str]</code> <p>Used only with <code>error_info_path</code>. Set error info compression method. One of:</p> <ul> <li><code>None</code> - do not compress</li> <li><code>gz</code> - GZip</li> <li><code>bz2</code> - BZip2</li> <li><code>xz</code> - LZMA/xz</li> </ul> <code>None</code> <p>Returns:</p> Type Description <code>Err</code> <p>Err instance.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>When called twice.</p> <code>ValueError</code> <p>On configuration parameters error.</p>"},{"location":"reference/gufo/err/frame/","title":"gufo.err.frame","text":"<p>FrameInfo structure.</p>"},{"location":"reference/gufo/err/frame/#gufo.err.frame.__get_anchor","title":"<code>__get_anchor(segment, indent=0)</code>","text":"<p>Split code segment and try to get error anchors.</p> <p>Backport from Python 3.11 <code>_extract_caret_anchors_from_line_segment</code>.</p> <p>Parameters:</p> Name Type Description Default <code>segment</code> <code>str</code> <p>Code segment with current op.</p> required <code>indent</code> <code>int</code> <p>Position offset.</p> <code>0</code> <p>Returns:</p> Type Description <code>Optional[Anchor]</code> <ul> <li>Anchor instance if code can be refined.</li> </ul> <code>Optional[Anchor]</code> <ul> <li>None otherwise</li> </ul>"},{"location":"reference/gufo/err/frame/#gufo.err.frame.__get_code_position","title":"<code>__get_code_position(code, inst_index, line)</code>","text":"<p>Extract code range for current instruction.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>CodeType</code> <p>Code object</p> required <code>inst_index</code> <code>int</code> <p>Current instruction index, usually from <code>tb_lasti</code></p> required <code>line</code> <code>str</code> <p>Current code line</p> required <p>Returns:</p> Type Description <code>Optional[CodePosition]</code> <p>Optional CodePosition instance</p>"},{"location":"reference/gufo/err/frame/#gufo.err.frame.__has_code_position","title":"<code>__has_code_position()</code>","text":"<p>Check if python supports exact code positions.</p> <p>Returns:</p> Type Description <code>bool</code> <ul> <li>True - if python 3.11+ and PYTHONNODEBUGRANGES is not set.</li> </ul> <code>bool</code> <ul> <li>False - otherwise</li> </ul>"},{"location":"reference/gufo/err/frame/#gufo.err.frame.exc_traceback","title":"<code>exc_traceback()</code>","text":"<p>Cast type to <code>sys.exc_info()</code>.</p> <p>Extract and return top-level excecution frame from current exception context.</p> <p>Returns:</p> Type Description <code>TracebackType</code> <p>Top-level exception frame.</p>"},{"location":"reference/gufo/err/frame/#gufo.err.frame.iter_frames","title":"<code>iter_frames(tb, context_lines=7)</code>","text":"<p>Iterate over traceback frames.</p> <p>Parameters:</p> Name Type Description Default <code>tb</code> <code>TracebackType</code> <p>current execution frame.</p> required <code>context_lines</code> <code>int</code> <p>Source code context to extract. Current line, up to <code>context_lines</code> below the current line, and up to <code>context_lines</code> above the current line will be extracted.</p> <code>7</code> <p>Returns:</p> Type Description <code>Iterable[FrameInfo]</code> <p>Iterable of FrameInfo, starting from top of the</p> <code>Iterable[FrameInfo]</code> <p>stack (current code position).</p>"},{"location":"reference/gufo/err/logger/","title":"gufo.err.logger","text":"<p>Define gufo.err logger.</p>"},{"location":"reference/gufo/err/types/","title":"gufo.err.types","text":"<p>Public API data types.</p>"},{"location":"reference/gufo/err/types/#gufo.err.types.Anchor","title":"<code>Anchor</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>Exact problem position (Python 3.11+).</p> <p>Denotes operator of subscript which causes the problem.</p> <p>Parameters:</p> Name Type Description Default <code>left</code> <code>int</code> <p>Starting column.</p> required <code>right</code> <code>int</code> <p>Stopping column.</p> required"},{"location":"reference/gufo/err/types/#gufo.err.types.CodePosition","title":"<code>CodePosition</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>Exact code position for Python 3.11+.</p> <p>Parameters:</p> Name Type Description Default <code>start_line</code> <code>int</code> <p>First line of code</p> required <code>end_line</code> <code>int</code> <p>Last line of code</p> required <code>start_col</code> <code>int</code> <p>Starting column (on start_line)</p> required <code>end_col</code> <code>int</code> <p>Ending column (on end_line)</p> required <code>anchor</code> <code>Optional[Anchor]</code> <p>Problem anchor</p> required"},{"location":"reference/gufo/err/types/#gufo.err.types.ErrorInfo","title":"<code>ErrorInfo</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>Current execution frame information.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Application or service name, as set by setup()</p> required <code>version</code> <code>str</code> <p>Application or service version, as set by setup()</p> required <code>fingerprint</code> <code>UUID</code> <p>Error fingerprint.</p> required <code>stack</code> <code>List[FrameInfo]</code> <p>List of <code>FrameInfo</code>. Current execution frame is first.</p> required <code>exception</code> <code>BaseException</code> <p>Exception instance, if caught.</p> required <code>timestamp</code> <code>Optional[datetime]</code> <p>Error timestamp.</p> <code>None</code> <code>root_module</code> <code>Optional[str]</code> <p>Optional root module, as set by setup()</p> <code>None</code>"},{"location":"reference/gufo/err/types/#gufo.err.types.ErrorInfo.get_app_top_frame","title":"<code>get_app_top_frame()</code>","text":"<p>Get application's top stack frame.</p> <p>Find top stack frame belonging to the application, if <code>root_module</code> is set, or return stack top otherwise.</p> <p>Returns:</p> Type Description <code>Optional[FrameInfo]</code> <ul> <li>FrameInfo if the stack is not empty.</li> </ul> <code>Optional[FrameInfo]</code> <ul> <li>None otherwise.</li> </ul>"},{"location":"reference/gufo/err/types/#gufo.err.types.ExceptionStub","title":"<code>ExceptionStub</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Stub to deserialized exceptions.</p> <p>Parameters:</p> Name Type Description Default <code>kls</code> <code>str</code> <p>Exception class name</p> required <code>args</code> <code>Tuple[Any, ...]</code> <p>Exception arguments</p> required"},{"location":"reference/gufo/err/types/#gufo.err.types.ExceptionStub.__str__","title":"<code>__str__()</code>","text":"<p>Format exception to string.</p> <p>Returns:</p> Type Description <code>str</code> <p>Formatted string.</p>"},{"location":"reference/gufo/err/types/#gufo.err.types.FrameInfo","title":"<code>FrameInfo</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>Execution frame.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Current callable name.</p> required <code>source</code> <code>Optional[SourceInfo]</code> <p>Optional <code>SourceInfo</code> procedure. May be missed on loader problems.</p> required <code>locals</code> <code>Dict[str, Any]</code> <p>Dicts of local variables.</p> required <code>module</code> <code>Optional[str]</code> <p>Python module name.</p> <code>None</code>"},{"location":"reference/gufo/err/types/#gufo.err.types.SourceInfo","title":"<code>SourceInfo</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>Source context for frame.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>Normalized file name.</p> required <code>first_line</code> <code>int</code> <p>first line of source context.</p> required <code>current_line</code> <code>int</code> <p>current execution line.</p> required <code>lines</code> <code>List[str]</code> <p>List of lines, starting from <code>first_line</code></p> required <code>pos</code> <code>Optional[CodePosition]</code> <p>Optional exact code position for Python 3.11+</p> <code>None</code>"},{"location":"reference/gufo/err/abc/","title":"gufo.err.abc","text":"<p>Abstract base classes to be used to extend the functionality.</p> <ul> <li>FailFast:   Fail-fast processing.</li> <li>Formatter:   Traceback formatters.</li> <li>Middleware:   Error-processing middleware.</li> </ul>"},{"location":"reference/gufo/err/abc/failfast/","title":"gufo.err.abc.failfast","text":"<p>BaseFailFast.</p>"},{"location":"reference/gufo/err/abc/failfast/#gufo.err.abc.failfast.BaseFailFast","title":"<code>BaseFailFast</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base type for fail-fast behavior.</p> <p>Fail-fast classes must implement <code>must_die</code> method. When fail-fast check decides the error is unrecoverable, it must return <code>True</code> value.</p>"},{"location":"reference/gufo/err/abc/failfast/#gufo.err.abc.failfast.BaseFailFast.must_die","title":"<code>must_die(t, v, tb)</code>  <code>abstractmethod</code>","text":"<p>Fail-fast check. Must be overriden in subclasses.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>Type[BaseException]</code> <p>Exception type. Same as <code>sys.exc_info()[0]</code>.</p> required <code>v</code> <code>BaseException</code> <p>Exception value. Same as <code>sys.exc_info()[1]</code>.</p> required <code>tb</code> <code>TracebackType</code> <p>Traceback. Same as <code>sys.exc_info()[2]</code>.</p> required <p>Returns:</p> Type Description <code>bool</code> <ul> <li><code>True</code>, if the error is not recoverable and the process</li> </ul> <code>bool</code> <p>must be terminated ASAP.</p> <code>bool</code> <ul> <li><code>False</code> to pass to the next check.</li> </ul>"},{"location":"reference/gufo/err/abc/formatter/","title":"gufo.err.abc.formatter","text":"<p>BaseFormatter class.</p>"},{"location":"reference/gufo/err/abc/formatter/#gufo.err.abc.formatter.BaseFormatter","title":"<code>BaseFormatter</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for formatters.</p> <p>Formatters process ErrorInfo instances and produces human-readable output.</p> <p>All formatters must implement <code>iter_format</code> method.</p> <p>Parameters:</p> Name Type Description Default <code>primary_char</code> <code>str</code> <p>Caret primary char.</p> <code>DEFAULT_PRIMARY_CHAR</code> <code>secondary_char</code> <code>str</code> <p>Caret secondary char.</p> <code>DEFAULT_SECONDARY_CHAR</code>"},{"location":"reference/gufo/err/abc/formatter/#gufo.err.abc.formatter.BaseFormatter.format","title":"<code>format(err)</code>","text":"<p>Format ErrorInfo to human-readable string.</p> <p>Parameters:</p> Name Type Description Default <code>err</code> <code>ErrorInfo</code> <p>ErrorInfo instance</p> required <p>Returns:</p> Type Description <code>str</code> <p>Human-readable output.</p>"},{"location":"reference/gufo/err/abc/formatter/#gufo.err.abc.formatter.BaseFormatter.get_caret","title":"<code>get_caret(line, pos, indent, dedent=0)</code>","text":"<p>Generate caret for code position.</p> <p>Carret has a format: <code>&lt;spaces&gt;&lt;primary chars...&gt;&lt;secondary chars...&gt;&lt;primary chars...&gt;</code>.</p> <p>Parameters:</p> Name Type Description Default <code>line</code> <code>str</code> <p>Current unstripped line of code</p> required <code>pos</code> <code>CodePosition</code> <p>CodePositio</p> required <code>indent</code> <code>int</code> <p>Add <code>indent</code> leading spaces</p> required <code>dedent</code> <code>int</code> <p>Remove <code>indent</code> leading spaces</p> <code>0</code>"},{"location":"reference/gufo/err/abc/formatter/#gufo.err.abc.formatter.BaseFormatter.get_exception_summary","title":"<code>get_exception_summary(x)</code>  <code>staticmethod</code>","text":"<p>Format exception to summary string.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>BaseException</code> <p>Exception instance</p> required <p>Returns:</p> Type Description <code>str</code> <p>Formatted string</p>"},{"location":"reference/gufo/err/abc/formatter/#gufo.err.abc.formatter.BaseFormatter.iter_format","title":"<code>iter_format(err)</code>  <code>abstractmethod</code>","text":"<p>Iterator yielding human-redable lines.</p> <p>Process ErrorInfo instance and yield humar-readable lines one-by-one.</p> <p>Parameters:</p> Name Type Description Default <code>err</code> <code>ErrorInfo</code> <p>ErrorInfo instance</p> required <p>Returns:</p> Type Description <code>Iterable[str]</code> <p>Iterator yieldig formatted lines.</p>"},{"location":"reference/gufo/err/abc/formatter/#gufo.err.abc.formatter.BaseFormatter.iter_stack","title":"<code>iter_stack(err)</code>","text":"<p>Iterate stack according to direction.</p> <p>Parameters:</p> Name Type Description Default <code>err</code> <code>ErrorInfo</code> <p>ErrorInfo instance.</p> required <p>Returns:</p> Type Description <code>Iterable[FrameInfo]</code> <p>Iterable of FrameInfo</p>"},{"location":"reference/gufo/err/abc/formatter/#gufo.err.abc.formatter.BaseFormatter.traceback_message","title":"<code>traceback_message()</code>","text":"<p>Get proper traceback message.</p> <p>Returns:</p> Type Description <code>str</code> <p>String like \"Traceback (most resent call last):\"</p>"},{"location":"reference/gufo/err/abc/middleware/","title":"gufo.err.abc.middleware","text":"<p>BaseMiddleware.</p>"},{"location":"reference/gufo/err/abc/middleware/#gufo.err.abc.middleware.BaseMiddleware","title":"<code>BaseMiddleware</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base type for error processing middleware.</p> <p>Middleware must implement <code>process</code> method.</p>"},{"location":"reference/gufo/err/abc/middleware/#gufo.err.abc.middleware.BaseMiddleware.process","title":"<code>process(info)</code>  <code>abstractmethod</code>","text":"<p>Process the error.</p> <p>Parameters:</p> Name Type Description Default <code>info</code> <code>ErrorInfo</code> <p>ErrorInfo instance with detailed error information.</p> required"},{"location":"reference/gufo/err/failfast/","title":"gufo.err.failfast","text":"<p>Fail-fast handlers.</p> <p>Fail-fast handlers are launched on every unnhandled exception and have to deside if the error is fatal and the process must be terminated quickly. See [gufo.err.abs.failfast.BaseFailFast] for details.</p> <p>The following fail-fast handlers are available out-of-the-box:</p> <ul> <li>AlwaysFailFast:   Triggers fail-fast unconditionaly.</li> <li>NeverFailFast:   Never triggers fail-fast.</li> <li>TypeMatchFailFast:   Fail-fast on the given exception types and optional substrings.</li> <li>TypesFailFast:   Fail-fast on the given list of exception types.</li> </ul>"},{"location":"reference/gufo/err/failfast/always/","title":"gufo.err.failfast.always","text":"<p>AlwaysFailFast.</p>"},{"location":"reference/gufo/err/failfast/always/#gufo.err.failfast.always.AlwaysFailFast","title":"<code>AlwaysFailFast</code>","text":"<p>               Bases: <code>BaseFailFast</code></p> <p>Always fail-fast.</p> <p>Trigger fail-fast unconditionally.</p> <p>Examples:</p> <pre><code>err.setup(fail_fast=[AlwaysFailFast()])\n</code></pre>"},{"location":"reference/gufo/err/failfast/always/#gufo.err.failfast.always.AlwaysFailFast.must_die","title":"<code>must_die(t, v, tb)</code>","text":"<p>Check if the process must die quickly.</p> <p>Always returns True.</p>"},{"location":"reference/gufo/err/failfast/never/","title":"gufo.err.failfast.never","text":"<p>NeverFailFast.</p>"},{"location":"reference/gufo/err/failfast/never/#gufo.err.failfast.never.NeverFailFast","title":"<code>NeverFailFast</code>","text":"<p>               Bases: <code>BaseFailFast</code></p> <p>Never fail-fast.</p> <p>Always returns False, so never inflicts fail-fast.</p> <p>Examples:</p> <pre><code>err.setup(fail_fast=[NeverFailFast()])\n</code></pre>"},{"location":"reference/gufo/err/failfast/never/#gufo.err.failfast.never.NeverFailFast.must_die","title":"<code>must_die(t, v, tb)</code>","text":"<p>Check if the process must die quickly.</p> <p>Always returns False.</p>"},{"location":"reference/gufo/err/failfast/typematch/","title":"gufo.err.failfast.typematch","text":"<p>TypeMatchFailFast.</p>"},{"location":"reference/gufo/err/failfast/typematch/#gufo.err.failfast.typematch.TypeMatchFailFast","title":"<code>TypeMatchFailFast</code>","text":"<p>               Bases: <code>BaseFailFast</code></p> <p>Fail-fast on the given exception types and optional substrings.</p> <p>Parameters:</p> Name Type Description Default <code>exc</code> <code>Optional[Union[str, Type[BaseException]]]</code> <ul> <li>Exception type.</li> <li>string in form \"module.name\".</li> <li>None to add matchers later.</li> </ul> <code>None</code> <code>match</code> <code>Optional[str]</code> <p>Optional substring matcher. Match all when set to None.</p> <code>None</code> <code>msg</code> <code>Optional[str]</code> <p>Optional message to show to log before failfast. <code>%s</code> will be expanded to the exception value.</p> <code>None</code> <p>Examples:</p> <p>Single type:</p> <pre><code>err.setup(fail_fast=[TypeMatchFailFast(RuntimeError)])\n</code></pre> <p>Single type with match:</p> <pre><code>err.setup(fail_fast=[TypeMatchFailFast(RuntimeError, match=\"stopped\")])\n</code></pre> <p>Single type with message:</p> <pre><code>err.setup(fail_fast=[\n    TypeMatchFailFast(RuntimeError, msg=\"Runtime Error: %s\")\n])\n</code></pre> <p>Chaining: <pre><code>err.setup(\n    fail_fast=[\n        TypeMatchFailFast()\n        .add_match(DivisionByZero)\n        .add_match(ValueError, match=\"null value\")\n        .add_match(RuntimeError, msg=\"Runtime failure: %s\")\n    ]\n)\n</code></pre></p>"},{"location":"reference/gufo/err/failfast/typematch/#gufo.err.failfast.typematch.TypeMatchFailFast.__exc_to_str","title":"<code>__exc_to_str(t)</code>  <code>staticmethod</code>","text":"<p>Convert exception instance to string class name.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>Type[BaseException]</code> <p>Exception type</p> required <p>Returns:</p> Type Description <code>str</code> <p>Class name in form <code>module.name</code></p>"},{"location":"reference/gufo/err/failfast/typematch/#gufo.err.failfast.typematch.TypeMatchFailFast.add_match","title":"<code>add_match(exc, *, match=None, msg=None)</code>","text":"<p>Add new exception type for the fail-fast.</p> <p>Parameters:</p> Name Type Description Default <code>exc</code> <code>Union[str, Type[BaseException]]</code> <p>Exception type or string in form \"module.name\".</p> required <code>match</code> <code>Optional[str]</code> <p>Optional substring matcher. Match all when set to None.</p> <code>None</code> <code>msg</code> <code>Optional[str]</code> <p>Optional message to show to log before failfast. <code>%s</code> will be expanded to the exception value.</p> <code>None</code> <p>Returns:</p> Type Description <code>TypeMatchFailFast</code> <p>Self reference to allow chaining.</p> Example <pre><code>err.setup(\n    fail_fast=[\n        TypeMatchFailFast()\n        .add_match(DivisionByZero)\n        .add_match(ValueError, match=\"null value\")\n        .add_match(RuntimeError, msg=\"Runtime failure: %s\")\n    ]\n)\n</code></pre>"},{"location":"reference/gufo/err/failfast/typematch/#gufo.err.failfast.typematch.TypeMatchFailFast.must_die","title":"<code>must_die(t, v, tb)</code>","text":"<p>Check if the proceess must die quickly.</p> <p>Check if exception class matches given substrings.</p>"},{"location":"reference/gufo/err/failfast/types/","title":"gufo.err.failfast.types","text":"<p>TypesFailFast.</p>"},{"location":"reference/gufo/err/failfast/types/#gufo.err.failfast.types.TypesFailFast","title":"<code>TypesFailFast</code>","text":"<p>               Bases: <code>BaseFailFast</code></p> <p>Fail-fast on the given list of exception types.</p> <p>Parameters:</p> Name Type Description Default <code>types</code> <code>Iterable[Type[Exception]]</code> <p>Iterable of exception types.</p> required <p>Examples:</p> <pre><code>from gufo.err import err\nfrom gufo.err.types import TypesFailFast\n\nerr.setup(fail_fast=[TypesFailFast([RuntimeError, ValueError])])\n</code></pre>"},{"location":"reference/gufo/err/failfast/types/#gufo.err.failfast.types.TypesFailFast.must_die","title":"<code>must_die(t, v, tb)</code>","text":"<p>Check if the process must die quickly.</p> <p>Returns true if the exception type is one of the given types.</p>"},{"location":"reference/gufo/err/formatter/","title":"gufo.err.formatter","text":"<p>ErrInfo formatters.</p> <p>Formatters process ErrorInfo structure and produces human-readable output.</p> <p>Available out-of-box:</p> <ul> <li>TerseFormatter:   condensed minimal output.</li> <li>ExtendFormatter:   extended detailed output.</li> </ul> <p>Configured formatter instances can be obtained via get_formatter() function.</p>"},{"location":"reference/gufo/err/formatter/extend/","title":"gufo.err.formatter.extend","text":"<p>ExtendFormatter.</p>"},{"location":"reference/gufo/err/formatter/extend/#gufo.err.formatter.extend.ExtendFormatter","title":"<code>ExtendFormatter</code>","text":"<p>               Bases: <code>BaseFormatter</code></p> <p>Extended output.</p> <p>Produces extended output with code surroundings and variable values.</p>"},{"location":"reference/gufo/err/formatter/extend/#gufo.err.formatter.extend.ExtendFormatter.iter_format","title":"<code>iter_format(err)</code>","text":"<p>Iterator yielding human-redable lines.</p> <p>Process ErrorInfo instance and yield humar-readable lines one-by-one.</p> <p>Parameters:</p> Name Type Description Default <code>err</code> <code>ErrorInfo</code> <p>ErrorInfo instance</p> required <p>Returns:</p> Type Description <code>Iterable[str]</code> <p>Iterator yieldig formatted lines.</p>"},{"location":"reference/gufo/err/formatter/extend/#gufo.err.formatter.extend.ExtendFormatter.iter_vars","title":"<code>iter_vars(fi)</code>","text":"<p>Iterate frame variables and convert them to the readable form.</p> <p>Parameters:</p> Name Type Description Default <code>fi</code> <code>FrameInfo</code> <p>FrameInfo instance</p> required <p>Returns:</p> Type Description <code>Iterable[Tuple[str, str]]</code> <p>Iterable of (<code>var name</code>, <code>var value</code>).</p>"},{"location":"reference/gufo/err/formatter/loader/","title":"gufo.err.formatter.loader","text":"<p>get_formatter implementation.</p>"},{"location":"reference/gufo/err/formatter/loader/#gufo.err.formatter.loader.get_formatter","title":"<code>get_formatter(format='terse', *, primary_char=DEFAULT_PRIMARY_CHAR, secondary_char=DEFAULT_SECONDARY_CHAR)</code>","text":"<p>Configure and return formatter instance.</p> <p>Parameters:</p> Name Type Description Default <code>format</code> <code>str</code> <p>Formatter name, one of: * <code>terse</code> * <code>extend</code></p> <code>'terse'</code> <code>primary_char</code> <code>str</code> <p>Caret primary char.</p> <code>DEFAULT_PRIMARY_CHAR</code> <code>secondary_char</code> <code>str</code> <p>Caret secondary char.</p> <code>DEFAULT_SECONDARY_CHAR</code> <p>Returns:</p> Type Description <code>BaseFormatter</code> <p>Formatter instance.</p>"},{"location":"reference/gufo/err/formatter/terse/","title":"gufo.err.formatter.terse","text":"<p>TerseFormatter class.</p>"},{"location":"reference/gufo/err/formatter/terse/#gufo.err.formatter.terse.TerseFormatter","title":"<code>TerseFormatter</code>","text":"<p>               Bases: <code>BaseFormatter</code></p> <p>Condensed terse output.</p>"},{"location":"reference/gufo/err/formatter/terse/#gufo.err.formatter.terse.TerseFormatter.iter_format","title":"<code>iter_format(err)</code>","text":"<p>Iterator yielding human-redable lines.</p> <p>Process ErrorInfo instance and yield humar-readable lines one-by-one.</p> <p>Parameters:</p> Name Type Description Default <code>err</code> <code>ErrorInfo</code> <p>ErrorInfo instance</p> required <p>Returns:</p> Type Description <code>Iterable[str]</code> <p>Iterator yieldig formatted lines.</p>"},{"location":"reference/gufo/err/middleware/","title":"gufo.err.middleware","text":"<p>Middleware handlers.</p> <p>Configured middleware handlers are launched on every unhandled exception and allows to customize an error processing. See BaseMiddleware for details.</p> <p>Available out-of-box:</p> <ul> <li>ErrorInfoMiddleware:   Dump errors to JSON files.</li> <li>SentryMiddleware:   Sentry integration.</li> <li>TracebackMiddleware:   Dump traceback to the gufo.err logger.</li> </ul>"},{"location":"reference/gufo/err/middleware/errorinfo/","title":"gufo.err.middleware.errorinfo","text":"<p>ErrorInfo middleware.</p>"},{"location":"reference/gufo/err/middleware/errorinfo/#gufo.err.middleware.errorinfo.ErrorInfoMiddleware","title":"<code>ErrorInfoMiddleware</code>","text":"<p>               Bases: <code>BaseMiddleware</code></p> <p>Dump error to JSON file.</p> <p>Use <code>err</code> tool to manipulate collected files.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to directory to write error info.</p> required <code>compress</code> <code>Optional[str]</code> <p>Compression algorithm. One of:</p> <ul> <li><code>None</code> - do not compress</li> <li><code>gz</code> - GZip</li> <li><code>bz2</code> - BZip2</li> <li><code>xz</code> - LZMA/xz</li> </ul> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If path is not writable.</p> <p>Examples:</p> <pre><code>from gufo.err import err\n\nerr.setup(error_info_path=\"/var/err/\", error_info_compress=\"gz\")\n</code></pre>"},{"location":"reference/gufo/err/middleware/errorinfo/#gufo.err.middleware.errorinfo.ErrorInfoMiddleware.process","title":"<code>process(info)</code>","text":"<p>Middleware entrypoing.</p> <p>Parameters:</p> Name Type Description Default <code>info</code> <code>ErrorInfo</code> <p>ErrorInfo instance.</p> required"},{"location":"reference/gufo/err/middleware/sentry/","title":"gufo.err.middleware.sentry","text":"<p>Sentry integration middleware.</p>"},{"location":"reference/gufo/err/middleware/sentry/#gufo.err.middleware.sentry.SentryMiddleware","title":"<code>SentryMiddleware</code>","text":"<p>               Bases: <code>BaseMiddleware</code></p> <p>Sentry integration.</p> <p><code>SentryMiddleware</code> is the wrapper around sentry_sdk to seamless integration into Gufo Err.</p> <p>Parameters:</p> Name Type Description Default <code>dsn</code> <code>Optional[str]</code> <p>URL of the sentry installation. If not provided, use <code>SENTRY_DSN</code> envoronment variable. Do not send any events if value is not set.</p> <code>None</code> <code>debug</code> <code>bool</code> <p>Turns debug mode on and off.</p> <code>False</code> <code>release</code> <code>Optional[str]</code> <p>Set current version explicitly. Sentry will try to determine the version automatically if not set.</p> <code>None</code> <code>before_send</code> <code>Optional[Callable[[Event, Dict[str, Any]], Optional[Event]]]</code> <p>The function accepting sentry event object and returning modified event object or nothing to stop processing.</p> <code>None</code> <p>Examples:</p> <p>To configure the SentryMiddleware:</p> <pre><code>from gufo.err import err\nfrom gufo.err.middleware.sentry import SentryMiddleware\n\nerr.setup()\nerr.add_middleware(\n    SentryMiddleware(\"http://127.0.0.1:1000/\", debug=True)\n)\n</code></pre>"},{"location":"reference/gufo/err/middleware/sentry/#gufo.err.middleware.sentry.SentryMiddleware.__before_send","title":"<code>__before_send(event, hint)</code>","text":"<p>Enrich event with user-defined information and fingerprint.</p> <p>Call user-defined <code>before_send</code> and add additional fingerprint information.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>Event</code> <p>Sentry event object.</p> required <code>hint</code> <code>Dict[str, Any]</code> <p>Error hints.</p> required <p>Returns:</p> Type Description <code>Optional[Event]</code> <p>Event object</p>"},{"location":"reference/gufo/err/middleware/sentry/#gufo.err.middleware.sentry.SentryMiddleware.process","title":"<code>process(info)</code>","text":"<p>Middleware entrypoint.</p> <p>Parameters:</p> Name Type Description Default <code>info</code> <code>ErrorInfo</code> <p>ErrorInfo instance.</p> required"},{"location":"reference/gufo/err/middleware/traceback/","title":"gufo.err.middleware.traceback","text":"<p>TracebackMiddleware.</p>"},{"location":"reference/gufo/err/middleware/traceback/#gufo.err.middleware.traceback.TracebackMiddleware","title":"<code>TracebackMiddleware</code>","text":"<p>               Bases: <code>BaseMiddleware</code></p> <p>Dump traceback to the <code>gufo.err</code> logger.</p> <p>Parameters:</p> Name Type Description Default <code>format</code> <code>str</code> <p>dumping format, one of <code>terse</code>, <code>extend</code>.</p> <code>'terse'</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>On invalid <code>format</code>.</p> <p>Examples:</p> <p>Implicit initialization of the middleware using default <code>terse</code> format:</p> <pre><code>from gufo.err import err\n\nerr.setup()\n</code></pre> <p>Implicit initialization of the middleware using explicit <code>terse</code> format:</p> <pre><code>from gufo.err import err\n\nerr.setup(format=\"terse\")\n</code></pre> <p>Implicit initialization of the middleware using explicit <code>extend</code> format:</p> <pre><code>from gufo.err import err\n\nerr.setup(format=\"extend\")\n</code></pre> <p>Explicit initialization of the middleware:</p> <pre><code>from gufo.err import err\nfrom gufo.err.middleware.traceback import TracebackMiddleware\n\nerr.setup(middleware=[TracebackMiddleware(format=\"extend\")])\n</code></pre>"},{"location":"reference/gufo/err/middleware/traceback/#gufo.err.middleware.traceback.TracebackMiddleware.process","title":"<code>process(info)</code>","text":"<p>Middleware entrypoint.</p> <p>Dumps stack info error log with given stack format.</p> <p>Parameters:</p> Name Type Description Default <code>info</code> <code>ErrorInfo</code> <p>ErrorInfo instance.</p> required"}]}